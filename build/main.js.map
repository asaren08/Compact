{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/gl-matrix/src/gl-matrix.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2d.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat2.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///./src/App/Additonal/AdditionalTool.ts","webpack:///./src/App/Additonal/StainedGlassDrawer.ts","webpack:///./src/App/Additonal/VoronoiAnimationDrawer.ts","webpack:///./src/App/Effect/EffectTool.ts","webpack:///./src/App/Effect/GradationDrawer.ts","webpack:///./src/App/Effect/GradationTool.ts","webpack:///./src/App/Image/ImageDrawer.ts","webpack:///./src/App/LayerManager/LayerManager.ts","webpack:///./src/Base/Canvas/GlCanvas.ts","webpack:///./src/Base/Component/Knob.ts","webpack:///./src/Base/Layer/Layer.ts","webpack:///./src/Base/Math/MathTool.ts","webpack:///./src/Base/Math/Matrix.ts","webpack:///./src/Base/Math/Vector.ts","webpack:///./src/Base/Shader/BrightnessContrastShader.ts","webpack:///./src/Base/Shader/ComposeNormalShader.ts","webpack:///./src/Base/Shader/ExpansionShader.ts","webpack:///./src/Base/Shader/FrostedGlassShader.ts","webpack:///./src/Base/Shader/GradationShader.ts","webpack:///./src/Base/Shader/GrayscaleShader.ts","webpack:///./src/Base/Shader/HueSaturationShader.ts","webpack:///./src/Base/Shader/InvertShader.ts","webpack:///./src/Base/Shader/PixelateShader.ts","webpack:///./src/Base/Shader/PointColorShader.ts","webpack:///./src/Base/Shader/PosterizationShader.ts","webpack:///./src/Base/Shader/RandomSpouitShader.ts","webpack:///./src/Base/Shader/SepiaShader.ts","webpack:///./src/Base/Shader/Shader.ts","webpack:///./src/Base/Shader/TextureShader.ts","webpack:///./src/Base/Shader/ThresholdShader.ts","webpack:///./src/Base/Shader/TranspalentColorShader.ts","webpack:///./src/Base/Shader/VoronoiShader.ts","webpack:///./src/Base/Shader/ZoomBlurShader.ts","webpack:///./src/Base/Texture/GradationTexture.ts","webpack:///./src/Base/Texture/ImageTexture.ts","webpack:///./src/Base/Texture/Texture.ts","webpack:///./src/main.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;;;;;;;;;;;;;;;;;;;AChBA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5ZA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7bA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxuBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,WAAW,WAAW;AAClC;AACA;AACA;AACA;;AAEA,YAAY,WAAW,YAAY;AACnC;AACA;AACA;AACA;;AAEA,aAAa,YAAY,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,aAAa;;AAExC,iBAAiB,cAAc,cAAc;AAC7C,iBAAiB,cAAc,cAAc;AAC7C,iBAAiB,cAAc,eAAe;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAA+B,aAAa;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,YAAY,YAAY;AACrC,aAAa,YAAY,YAAY;AACrC,aAAa,YAAY,aAAa;;AAEtC;AACA,sBAAsB,yBAAyB;AAC/C,0BAA0B,qBAAqB;AAC/C,0BAA0B,yBAAyB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA,iEAA+B,aAAa;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1qDA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;AACA,sBAAsB;AACtB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7lBD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,KAAK;AACjB;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,MAAM;AAClB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACr0BA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9mBD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,OAAO;AAC1B,oBAAoB,iBAAiB;AACrC;AACA,oBAAoB,iBAAiB;AACrC;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9vBD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,OAAO;AAC1B,oBAAoB,iBAAiB,iBAAiB;AACtD;AACA,oBAAoB,iBAAiB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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.ts\");\n","import * as glMatrix from \"./gl-matrix/common.js\";\nimport * as mat2 from \"./gl-matrix/mat2.js\";\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\nimport * as mat3 from \"./gl-matrix/mat3.js\";\nimport * as mat4 from \"./gl-matrix/mat4.js\";\nimport * as quat from \"./gl-matrix/quat.js\";\nimport * as quat2 from \"./gl-matrix/quat2.js\";\nimport * as vec2 from \"./gl-matrix/vec2.js\";\nimport * as vec3 from \"./gl-matrix/vec3.js\";\nimport * as vec4 from \"./gl-matrix/vec4.js\";\n\nexport {\n  glMatrix,\n  mat2, mat2d, mat3, mat4,\n  quat, quat2,\n  vec2, vec3, vec4,\n};\n","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\"\n\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nexport function fromValues(m00, m01, m10, m11) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    let a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\n  // Calculate the determinant\n  let det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] =  a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] =  a0 * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  let a0 = a[0];\n  out[0] =  a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] =  a0;\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n}\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix\n * @param {mat2} D the diagonal matrix\n * @param {mat2} U the upper triangular matrix\n * @param {mat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2]/a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2x3 Matrix\n * @module mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nexport function fromValues(a, b, c, d, tx, ty) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function invert(out, a) {\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\n  let atx = a[4], aty = a[5];\n\n  let det = aa * ad - ab * ac;\n  if(!det){\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nexport function translate(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}\n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n}\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2);\n  let nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (2 * far * near) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s != 0.0) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > 0.000001 ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\nexport function create() {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = 0;\n  dq[1] = 0;\n  dq[2] = 0;\n  dq[3] = 1;\n  dq[4] = 0;\n  dq[5] = 0;\n  dq[6] = 0;\n  dq[7] = 0;\n  return dq;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function clone(a) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  let ax = x2 * 0.5,\n    ay = y2 * 0.5,\n    az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q quaternion\n * @param {vec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotationTranslation(out, q, t) {\n  let ax = t[0] * 0.5,\n    ay = t[1] * 0.5,\n    az = t[2] * 0.5,\n    bx = q[0],\n    by = q[1],\n    bz = q[2],\n    bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Creates a dual quat from a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {vec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {mat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  let outer = quat.create();\n  mat4.getRotation(outer, a);\n  let t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} real part\n */\nexport const getReal = quat.copy;\n\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} dual part\n */\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\nexport const setReal = quat.copy;\n\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {quat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\nexport function getTranslation(out, a) {\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to translate\n * @param {vec3} v vector to translate by\n * @returns {quat2} out\n */\nexport function translate(out, a, v) {\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3],\n    bx1 = v[0] * 0.5,\n    by1 = v[1] * 0.5,\n    bz1 = v[2] * 0.5,\n    ax2 = a[4],\n    ay2 = a[5],\n    az2 = a[6],\n    aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateX(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateY(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateZ(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {quat} q quaternion to rotate by\n * @returns {quat2} out\n */\nexport function rotateByQuatAppend(out, a, q) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat} q quaternion to rotate by\n * @param {quat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\nexport function rotateByQuatPrepend(out, q, a) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    bx = a[0],\n    by = a[1],\n    bz = a[2],\n    bw = a[3];\n\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {vec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n  let axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  let bx = s * axis[0] / axisLength;\n  let by = s * axis[1] / axisLength;\n  let bz = s * axis[2] / axisLength;\n  let bw = Math.cos(rad);\n\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return out;\n}\n\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n * @function\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n */\nexport function multiply(out, a, b) {\n  let ax0 = a[0],\n    ay0 = a[1],\n    az0 = a[2],\n    aw0 = a[3],\n    bx1 = b[4],\n    by1 = b[5],\n    bz1 = b[6],\n    bw1 = b[7],\n    ax1 = a[4],\n    ay1 = a[5],\n    az1 = a[6],\n    aw1 = a[7],\n    bx0 = b[0],\n    by0 = b[1],\n    bz0 = b[2],\n    bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = quat.dot;\n\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\nexport function lerp(out, a, b, t) {\n  let mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\nexport function invert(out, a) {\n  let sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Calculates the length of a dual quat\n *\n * @param {quat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\nexport const length = quat.length;\n\n/**\n * Alias for {@link quat2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {quat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = quat.squaredLength;\n\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\nexport function normalize(out, a) {\n  let magnitude = squaredLength(a);\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    out[0] = a[0] / magnitude;\n    out[1] = a[1] / magnitude;\n    out[2] = a[2] / magnitude;\n    out[3] = a[3] / magnitude;\n    out[4] = a[4] / magnitude;\n    out[5] = a[5] / magnitude;\n    out[6] = a[6] / magnitude;\n    out[7] = a[7] / magnitude;\n  }\n  return out;\n}\n\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {quat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat2} a the first dual quaternion.\n * @param {quat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n    a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {quat2} a the first dual quat.\n * @param {quat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = 0;\n  out[1] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, vectorScale) {\n  vectorScale = vectorScale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import { GlCanvas } from \"../../Base/Canvas/GlCanvas\";\nimport { LayerManager } from \"../LayerManager/LayerManager\";\nimport { VoronoiAnimationDrawer } from \"./VoronoiAnimationDrawer\";\nimport { StainedGlassDrawer } from \"./StainedGlassDrawer\";\n\n// 追加機能のタイプ\nexport enum AdditionalType {\n    AdditionalTypeNone,\n    AdditionalTypeVoronoiAnimation,\n    AdditionalTypeDistanceMapAnimation,\n    AdditionalTypeStainedGlass,\n    AdditionalTypeSoftShadow\n}\n\n// 追加機能を実行するクラス\nexport class AdditionalTool {\n    private canvas: GlCanvas;                       // キャンバス\n    private layerManager: LayerManager;             // レイヤー\n    private currentAdditionalType: AdditionalType;  // エフェクトのタイプ\n    private voronoiDrawer: VoronoiAnimationDrawer;  // ボロノイの描画クラス\n    private stainedGlassDrawer: StainedGlassDrawer; // ステンドグラスの描画クラス\n\n    // コンストラクタ\n    constructor(cnvs: GlCanvas, manager: LayerManager) {\n        this.canvas = cnvs;\n        this.layerManager = manager;\n        this.currentAdditionalType = AdditionalType.AdditionalTypeNone;\n        this.voronoiDrawer = new VoronoiAnimationDrawer();\n        this.voronoiDrawer.prepareShaderProgram(this.canvas.getGL());\n        this.stainedGlassDrawer = new StainedGlassDrawer();\n        this.stainedGlassDrawer.prepareShaderProgram(this.canvas.getGL());\n    }\n\n    // 追加機能タイプを取得する\n    public getAdditionalType(): AdditionalType {\n        return this.currentAdditionalType;\n    }\n\n    // 追加機能タイプを設定する\n    public setAdditionalType(type: AdditionalType): void {\n        this.currentAdditionalType = type;\n    }\n\n    // アニメーションを停止する\n    public stopAnimation(): void {\n        this.voronoiDrawer.stopAnimation();\n    }\n\n    // 描画する\n    public draw(seedCount: number): void {\n        let gl = this.canvas.getGL();\n        let texture = this.layerManager.getCanvasLayer().getTexture();\n        let matrix = this.canvas.getMatrix();\n        let buffer = this.canvas.getFrameBuffer();\n        switch (this.currentAdditionalType) {\n            case AdditionalType.AdditionalTypeVoronoiAnimation:\n                this.voronoiDrawer.setSeedCount(seedCount);\n                this.voronoiDrawer.draw(gl, buffer, matrix,\n                                        this.currentAdditionalType);\n                break;\n            case AdditionalType.AdditionalTypeDistanceMapAnimation:\n                this.voronoiDrawer.setSeedCount(seedCount);\n                this.voronoiDrawer.draw(gl, buffer, matrix,\n                                        this.currentAdditionalType);\n                break;\n            case AdditionalType.AdditionalTypeStainedGlass:\n                this.stainedGlassDrawer.draw(gl, buffer, texture, matrix,\n                                             seedCount / 300.);\n                break;\n            case AdditionalType.AdditionalTypeSoftShadow:\n                break;\n        }\n    }\n}","import { RandomSpouitShader } from \"../../Base/Shader/RandomSpouitShader\";\nimport { Texture } from \"../../Base/Texture/Texture\";\nimport { VoronoiAnimationDrawer } from \"./VoronoiAnimationDrawer\";\n\n// ステンドグラス風の描画を行うクラス\nexport class StainedGlassDrawer {\n    private randomShader: RandomSpouitShader;   // ランダムに色を取るシェーダー\n    private voronoiDrawer: VoronoiAnimationDrawer;  // ボロノイ描画クラス\n\n    // コンストラクタ\n    constructor() {\n        this.randomShader = new RandomSpouitShader(); \n        this.voronoiDrawer = new VoronoiAnimationDrawer();\n    }\n\n        // シェーダープログラムを準備する\n    public prepareShaderProgram(gl: WebGLRenderingContext) {\n        this.voronoiDrawer.prepareShaderProgram(gl);\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, frameBuffer: WebGLFramebuffer,\n                texture: WebGLTexture, matrix: Float32Array,\n                seedCount: number): void {\n        let seed = new Texture();\n        seed.makeTexture(gl);\n        this.randomShader.draw(gl, frameBuffer, texture, seed.getTexture(), matrix,\n                               seedCount);\n        this.voronoiDrawer.drawVoronoi(gl, frameBuffer, matrix, seed.getTexture());\n    }\n}","import { VoronoiShader } from \"../../Base/Shader/VoronoiShader\";\nimport { Texture } from \"../../Base/Texture/Texture\";\nimport { PointColorShader } from \"../../Base/Shader/PointColorShader\";\nimport { AdditionalType } from \"./AdditionalTool\";\n\nlet ANIMATION_SPEED = -0.01;                 // 頂点の移動速度\n\n// ボロノイアニメーションを描画するクラス\nexport class VoronoiAnimationDrawer {\n    private seedCount: number               // 母点の数(ユーザーがスライダーで指定)\n    private vertex: number[];               // 母点頂点\n    private color: number[];                // 母点色\n    private voronoiShader: VoronoiShader;   // ボロノイシェーダー\n    private pointShader: PointColorShader;  // 点を描画するシェーダー\n    private seedTexture: Texture;           // 母点を打ち込んだテクスチャ\n    private read: WebGLTexture;             // 読み込みテクスチャ\n    private write: WebGLTexture;            // 書き込みテクスチャ\n    private animationId: number;            // アニメーションID\n  \n    // コンストラクタ\n    constructor() {\n        this.vertex = new Array();\n        this.color = new Array();\n        this.voronoiShader = new VoronoiShader();\n        this.pointShader = new PointColorShader();\n        this.seedTexture = new Texture();\n        this.seedCount = 0;\n        this.animationId = -1;\n    }\n\n    // 乱数を作成する\n    private getRandom(): number {\n        return Math.random() * 2 - 1.0;\n    }\n\n    // 母点数を指定する\n    public setSeedCount(num: number) {\n        this.seedCount = num;\n        this.setSeedVerex();\n    }\n\n    // 母点頂点を設定する\n    private setSeedVerex(): void {\n        this.vertex.length = 0;\n        this.color.length = 0;\n        for (let i = 0; i < this.seedCount; i++) {\n            this.vertex.push(this.getRandom(), this.getRandom());\n            if (i % 2 === 0) {\n                this.color.push(0.1 + i /this.seedCount,0.4, 0.9,1.0);\n            } else {\n                this.color.push(0.1 + i / this.seedCount, 0.9, 0.8, 1.0);\n            }\n        }\n    }\n\n    // 頂点を移動する\n    private translateVertex(): void {\n        for (let i = 0; i < this.vertex.length -2; i+=2) {\n            let x = this.vertex[i];\n            let y = this.vertex[i + 1];\n            this.vertex[i] = x + ANIMATION_SPEED;  // x座標\n            this.vertex[i + 1] = y + ANIMATION_SPEED; // y座標\n            if (this.vertex[i] < -1.) {\n                this.vertex[i] = y;\n                this.vertex[i + 1] = 0;\n            } else if (this.vertex[i + 1] < -1.){\n                this.vertex[i] = 1;\n                this.vertex[i + 1] = -x;\n            }\n        }\n    }\n\n    // テクスチャを入れ替える\n    private swapTextures(){\n        const tmp = this.read;\n        this.read = this.write;\n        this.write = tmp;\n    }\n\n    // シェーダープログラムを準備する\n    public prepareShaderProgram(gl: WebGLRenderingContext) {\n        this.voronoiShader.prepareProgram(gl);\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, frameBuffer: WebGLFramebuffer,\n                matrix: Float32Array, type: AdditionalType): void {\n        this.stopAnimation();\n        this.translateVertex();\n        this.seedTexture.makeTexture(gl);\n        this.pointShader.draw(gl, frameBuffer, gl.POINTS,\n                              this.seedTexture.getTexture(), this.vertex,\n                              this.color, this.seedCount, matrix);\n        \n        let readTex = new Texture();\n        readTex.makeTexture(gl);\n        this.read = readTex.getTexture();\n        this.voronoiShader.makeReadTexture(gl, frameBuffer,\n                                           this.seedTexture.getTexture(),\n                                           this.read, matrix);\n        \n        let writeTex = new Texture();\n        writeTex.makeTexture(gl);\n        this.write = writeTex.getTexture();\n        let step = gl.canvas.width / 2.0;\n        while (step >= 1) {\n            this.voronoiShader.runJumpFlood(gl, frameBuffer, this.read, this.write,\n                                            matrix, step);\n            this.swapTextures();\n            step /= 2.0;   \n        }\n\n        if (type === AdditionalType.AdditionalTypeDistanceMapAnimation) {\n            this.voronoiShader.drawDistanceMap(gl, this.seedTexture.getTexture(),\n                                               this.read, matrix);\n        } else {\n            this.voronoiShader.drawVoronoi(gl, this.seedTexture.getTexture(),\n                                           this.read, matrix);\n        }\n        this.animationId = requestAnimationFrame(() => this.draw(gl, frameBuffer,\n                                                                 matrix, type));\n    }\n\n    // ボロノイ図を描く\n    public drawVoronoi(gl: WebGLRenderingContext, frameBuffer: WebGLFramebuffer,\n                      matrix: Float32Array, texture: WebGLTexture): void {\n        let readTex = new Texture();\n        readTex.makeTexture(gl);\n        this.read = readTex.getTexture();\n        this.voronoiShader.makeReadTexture(gl, frameBuffer,texture,\n                                           this.read, matrix);\n        \n        let writeTex = new Texture();\n        writeTex.makeTexture(gl);\n        this.write = writeTex.getTexture();\n        let step = gl.canvas.width / 2.0;\n        while (step >= 1) {\n            this.voronoiShader.runJumpFlood(gl, frameBuffer, this.read, this.write,\n                                            matrix, step);\n            this.swapTextures();\n            step /= 2.0;   \n        }\n        this.voronoiShader.drawVoronoi(gl, texture, this.read, matrix);\n    }\n\n    // アニメーションを停止する\n    public stopAnimation(): void {\n        if (this.animationId != -1) {\n            cancelAnimationFrame(this.animationId);\n        }\n    }\n}","import { GlCanvas } from \"../../Base/Canvas/GlCanvas\";\nimport { LayerManager } from \"../LayerManager/LayerManager\";\nimport { SepiaShader } from \"../../Base/Shader/SepiaShader\";\nimport { GrayscaleShader } from \"../../Base/Shader/GrayscaleShader\";\nimport { InvertShader } from \"../../Base/Shader/InvertShader\";\nimport { PosterizationShader } from \"../../Base/Shader/PosterizationShader\";\nimport { ForestedGlassShader } from \"../../Base/Shader/FrostedGlassShader\";\nimport { ThresholdShader } from \"../../Base/Shader/ThresholdShader\";\nimport { TranspalentColorShader } from \"../../Base/Shader/TranspalentColorShader\";\nimport { ZoomBlurShader } from \"../../Base/Shader/ZoomBlurShader\";\nimport { BrightnessContrastShader } from \"../../Base/Shader/BrightnessContrastShader\";\nimport { HueSaturationShader } from \"../../Base/Shader/HueSaturationShader\";\nimport { PixelateShader } from \"../../Base/Shader/PixelateShader\";\nimport { ExpansionShader } from \"../../Base/Shader/ExpansionShader\";\n\n// エフェクトのタイプ\nexport enum EffectType {\n    EffectTypeNone,\n    EffectTypeSepia,\n    EffectTypeGrayscale,\n    EffectTypeInvert,\n    EffectTypePosterization,\n    EffectTypefrostedGlass,\n    EffectTypeThreshold,\n    EffectTypeTranspalent,\n    EffectTypeZoomBlur,\n    EffectTypeBrightnessContrast,\n    EffectTypeHueSarturation,\n    EffectTypePixelate,\n    EffectTypeExpansion,\n}\n\n// エフェクトを行うクラス\nexport class EffectTool {\n    private canvas: GlCanvas;               // キャンバス\n    private layerManager: LayerManager;     // レイヤー\n    private currentEffectType: EffectType;  // エフェクトのタイプ\n\n    // コンストラクタ\n    constructor(cnvs: GlCanvas, manager: LayerManager) {\n        this.canvas = cnvs;\n        this.layerManager = manager;\n        this.currentEffectType = EffectType.EffectTypeNone;\n    }\n\n    // エフェクトタイプを取得する\n    public getEffectType(): EffectType {\n        return this.currentEffectType;\n    }\n\n    // エフェクトタイプを設定する\n    public setEffectType(type: EffectType): void {\n        this.currentEffectType = type;\n    }\n\n    // 描画する\n    public draw(value1: number, value2 = 0, value3 = 0, value4 = 0): void {\n        switch (this.currentEffectType) {\n            case EffectType.EffectTypeSepia:\n                let sepiaShader = new SepiaShader();\n                sepiaShader.draw(this.canvas.getGL(),\n                                 this.layerManager.getCanvasLayer().getTexture(),\n                                 this.canvas.getMatrix());\n                break;\n            case EffectType.EffectTypeGrayscale:\n                let gsShader = new GrayscaleShader();\n                gsShader.draw(this.canvas.getGL(),\n                              this.layerManager.getCanvasLayer().getTexture(),\n                              this.canvas.getMatrix());    \n                break;\n            case EffectType.EffectTypeInvert:\n                let invertShader = new InvertShader();\n                invertShader.draw(this.canvas.getGL(),\n                                  this.layerManager.getCanvasLayer().getTexture(),\n                                  this.canvas.getMatrix());    \n                break;\n            case EffectType.EffectTypePosterization:\n                let posShader = new PosterizationShader();\n                posShader.draw(this.canvas.getGL(),\n                               this.layerManager.getCanvasLayer().getTexture(),\n                               this.canvas.getMatrix(), value1); \n                break;\n            case EffectType.EffectTypefrostedGlass:\n                let fgShader = new ForestedGlassShader();\n                fgShader.draw(this.canvas.getGL(),\n                              this.layerManager.getCanvasLayer().getTexture(),\n                              this.canvas.getMatrix(), value1); \n                break;\n            case EffectType.EffectTypeThreshold:\n                let thShader = new ThresholdShader();\n                thShader.draw(this.canvas.getGL(),\n                              this.layerManager.getCanvasLayer().getTexture(),\n                              this.canvas.getMatrix(), value1); \n                break;\n            case EffectType.EffectTypeTranspalent:\n                let tpShader = new TranspalentColorShader();\n                tpShader.draw(this.canvas.getGL(),\n                              this.layerManager.getCanvasLayer().getTexture(),\n                              this.canvas.getMatrix(), value1); \n                break;\n            case EffectType.EffectTypeZoomBlur:\n                let zbShader = new ZoomBlurShader();\n                zbShader.draw(this.canvas.getGL(),\n                              this.layerManager.getCanvasLayer().getTexture(),\n                              this.canvas.getMatrix(), value3, value4, value1);\n                break;\n            case EffectType.EffectTypeBrightnessContrast:\n                let bcShader = new BrightnessContrastShader();\n                bcShader.draw(this.canvas.getGL(),\n                              this.layerManager.getCanvasLayer().getTexture(),\n                              this.canvas.getMatrix(), value1, value2);\n                break;\n            case EffectType.EffectTypeHueSarturation:\n                let hsShader = new HueSaturationShader();\n                hsShader.draw(this.canvas.getGL(),\n                              this.layerManager.getCanvasLayer().getTexture(),\n                              this.canvas.getMatrix(), value1, value2);\n                break;\n            case EffectType.EffectTypePixelate:\n                let pxShader = new PixelateShader();\n                pxShader.draw(this.canvas.getGL(),\n                              this.layerManager.getCanvasLayer().getTexture(),\n                              this.canvas.getMatrix(), value2, value3, value1);\n                break;\n            case EffectType.EffectTypeExpansion:\n                let exShader = new ExpansionShader();\n                exShader.draw(this.canvas.getGL(),\n                              this.layerManager.getCanvasLayer().getTexture(),\n                    this.canvas.getMatrix(), value3, value4, value1, value2);\n                    break;\n        }\n    }\n}","import { GradationTexture } from \"../../Base/Texture/GradationTexture\";\nimport { GradationType } from \"./GradationTool\";\nimport { GradationShader } from \"../../Base/Shader/GradationShader\";\n\n// 青-赤\nlet blueRedPos = [\n    -1.,    // 始点\n    1.      // 終点\n];\n\nlet blueRedCol = [\n    0, 0 ,1, 1, // 始点カラー\n    1, 0 ,0, 1  // 終点カラー\n];\n\n// トイカメラ\nlet toyCameraPos = [\n    -1.,            // 始点\n    -1. + 2. / 4., \n    -1. + 4. / 4.,\n    -1. + 6. / 4.,\n     1.,            // 終点\n]\n\nlet toyCameraCol = [\n    23.  / 255., 32. / 255., 50. / 255., 1.,   // 始点カラー\n    30. / 255., 50. / 255., 60. / 255., 1., \n    22. / 255., 120. / 255., 87. / 255., 1., \n    100. / 255., 209. / 255., 137. / 255., 1., \n    240. / 255., 255. / 255., 245. / 255., 1.,  // 終点カラー\n];\n\n// レトロ風\nlet retroPos = [\n    -1.,            // 始点\n    -1. + 2. / 4., \n    -1. + 4. / 4.,\n    -1. + 6. / 4.,\n     1.,            // 終点\n]\n\nlet retroCol = [\n    70.  / 255., 70. / 255., 140. / 255., 1.,   // 始点カラー\n    110. / 255., 135. / 255., 170. / 255., 1., \n    190. / 255., 180. / 255., 165. / 255., 1., \n    240. / 255., 209. / 255., 170. / 255., 1., \n    250. / 255., 230. / 255., 210. / 255., 1.,  // 終点カラー\n];\n\n\n// グラデーション描画を作成するクラス\nexport class GradationDrawer {\n    private vertex: number[];               // テクスチャ頂点\n    private color: number[];                // 頂点色\n    private gradation: GradationTexture;    // グラデーション\n    private shader: GradationShader;        // シェーダー\n\n    // コンストラクタ\n    constructor() {\n        this.vertex = new Array();\n        this.color = new Array();\n        this.gradation = new GradationTexture();\n        this.shader = new GradationShader();\n    }\n\n    // テクスチャ頂点と頂点色を設定する\n    private setVertexAndColor(pos: number[], col: number[]) {\n        this.vertex.length = 0;\n        this.color.length = 0;\n        for (let i = 0; i < pos.length - 1; i++) {\n            // 左上頂点\n            let idx = i * 4;\n            this.vertex.push(pos[i], -1.);\n            this.color.push(col[idx], col[idx + 1], col[idx + 2], col[idx + 3]);\n\n            // 左下頂点\n            this.vertex.push(pos[i], 1.);\n            this.color.push(col[idx], col[idx + 1], col[idx + 2], col[idx + 3]);\n\n            // 右上頂点\n            this.vertex.push(pos[i + 1], -1.);\n            let nextIdx = (i + 1) * 4;\n            this.color.push(col[nextIdx], col[nextIdx + 1], col[nextIdx + 2], col[nextIdx + 3]);\n\n            // 左下頂点\n            this.vertex.push(pos[i], 1.);\n            this.color.push(col[idx], col[idx + 1], col[idx + 2], col[idx + 3]);\n\n            // 右上頂点\n            this.vertex.push(pos[i + 1], -1.);\n            this.color.push(col[nextIdx], col[nextIdx + 1], col[nextIdx + 2], col[nextIdx + 3]);\n\n            // 右上頂点\n            this.vertex.push(pos[i + 1], 1.);\n            this.color.push(col[nextIdx], col[nextIdx + 1], col[nextIdx + 2], col[nextIdx + 3]);\n        }\n    }\n\n    // グラデーション作成する(オフスクリーン描画)\n    private makeGradation(gl: WebGLRenderingContext, frameBuffer: WebGLFramebuffer,                        type: GradationType, matrix: Float32Array): void {\n        switch (type) {\n            case GradationType.GradationTypeBlueRed:\n                this.setVertexAndColor(blueRedPos, blueRedCol);\n                var count = (blueRedPos.length - 1) * 2 * 3;\n                this.gradation.makeGradation(gl, frameBuffer, this.vertex,\n                                             this.color, count, matrix);\n                break;\n            case GradationType.GradationTypeToyCamera:\n                this.setVertexAndColor(toyCameraPos, toyCameraCol);\n                var count = (toyCameraPos.length - 1) * 2 * 3;\n                this.gradation.makeGradation(gl, frameBuffer, this.vertex,\n                                             this.color, count, matrix);    \n                break;\n            case GradationType.GradationTypeRetro:\n                this.setVertexAndColor(retroPos, retroCol);\n                var count = (retroPos.length - 1) * 2 * 3;\n                this.gradation.makeGradation(gl, frameBuffer, this.vertex,\n                                            this.color, count, matrix);        \n                break;\n        }\n    }\n\n    // テクスチャにグラデーションをかける\n    public drawGradation(gl: WebGLRenderingContext, frameBuffer: WebGLFramebuffer,\n                         texture: WebGLTexture, type: GradationType,\n                         matrix: Float32Array): void {\n        this.makeGradation(gl, frameBuffer, type, matrix);\n        this.shader.draw(gl, this.gradation.getTexture(), texture, matrix);\n    }\n}","import { GlCanvas } from \"../../Base/Canvas/GlCanvas\";\nimport { LayerManager } from \"../LayerManager/LayerManager\";\nimport { GradationDrawer } from \"./GradationDrawer\";\n\n// グラデーションのタイプ\nexport enum GradationType {\n    GradationTypeNone,\n    GradationTypeBlueRed,\n    GradationTypeToyCamera,\n    GradationTypeRetro\n}\n\n// グラデーションを行うクラス\nexport class GradationTool {\n    private canvas: GlCanvas;                       // キャンバス\n    private layerManager: LayerManager;             // レイヤー\n    private currentGradationType: GradationType;    // エフェクトのタイプ\n    private drawer: GradationDrawer;                // グラデーション描画クラス\n\n    // コンストラクタ\n    constructor(cnvs: GlCanvas, manager: LayerManager) {\n        this.canvas = cnvs;\n        this.layerManager = manager;\n        this.currentGradationType = GradationType.GradationTypeNone;\n        this.drawer = new GradationDrawer();\n    }\n\n    // グラデーションタイプを取得する\n    public getGradationType(): GradationType {\n        return this.currentGradationType;\n    }\n\n    // グラデーションタイプを設定する\n    public setGradationType(type: GradationType): void {\n        this.currentGradationType = type;\n    }\n\n    // 描画する\n    public draw(): void {\n        let gl = this.canvas.getGL();\n        let texture = this.layerManager.getCanvasLayer().getTexture();\n        let matrix = this.canvas.getMatrix();\n        let buffer = this.canvas.getFrameBuffer();\n        this.drawer.drawGradation(gl, buffer, texture, this.currentGradationType,                              matrix);  \n    }\n}","import { ImageTexture } from \"../../Base/Texture/ImageTexture\";\nimport { Matrix } from \"../../Base/Math/Matrix\";\nimport { TextureShader } from \"../../Base/Shader/TextureShader\";\nimport { GlCanvas } from \"../../Base/Canvas/GlCanvas\";\nimport { Texture } from \"../../Base/Texture/Texture\";\n\n// 画像の書き出しを行うクラス\nexport class ImageDrawer {\n    private image: ImageTexture;    // 画像テクスチャ\n\n    // コンストラクタ\n    constructor() { \n        this.image = new ImageTexture();\n    }\n    \n    // 画像を取得する\n    public getImageFile(files) {\n        let length = files.length;\n        let imageFile = null;\n        for (let i = 0; i < length; i++) {\n            if (!files[i] || files[i].type.indexOf('image/') < 0) {\n                continue; // 画像ファイルではないとき\n            }\n            imageFile = files[i];\n        }\n        return imageFile;\n    }\n\n    // 画像テクスチャを描画する\n    public draw(gl: WebGLRenderingContext,image: HTMLImageElement): void {\n        this.image.makeImageTexture(gl, image);\n    }\n\n    // 画像テクスチャを取得する\n    public getImageTexture() {\n        return this.image.getTexture();\n    }\n}","import { GlCanvas } from \"../../Base/Canvas/GlCanvas\";\nimport { Layer } from \"../../Base/Layer/Layer\";\nimport { ComposeNormalShader } from \"../../Base/Shader/ComposeNormalShader\";\nimport { PointColorShader } from \"../../Base/Shader/PointColorShader\";\nimport { TextureShader } from \"../../Base/Shader/TextureShader\";\nimport { Texture } from \"../../Base/Texture/Texture\";\nimport { ImageDrawer } from \"../Image/ImageDrawer\";\n\nlet ID_CANVAS_LAYER = 1000;     // キャンバスレイヤーのID\n\n// レイヤーの管理クラス\nexport class LayerManager {\n    private canvas: GlCanvas;                   // キャンバス\n    private layers: Layer[];                    // レイヤー\n    private canvasLayer: Layer;                 // キャンバスレイヤー\n    private composeShader: ComposeNormalShader; // 普通合成シェーダー\n\n    // コンストラクタ\n    constructor(cnvs: GlCanvas) {\n        this.layers = new Array();\n        this.composeShader = new ComposeNormalShader();\n        this.canvas = cnvs;\n        this.initCanvasLayer();\n    }\n\n    // キャンバスレイヤーを初期化する\n    public initCanvasLayer(): void {\n        let texture = new Texture();\n        texture.makeTexture(this.canvas.getGL());\n        let shader = new PointColorShader();\n        let position = [\n            -1.0,  1.0,\n             1.0,  1.0,\n            -1.0, -1.0, \n        \n            -1.0, -1.0,\n             1.0,  1.0,\n             1.0, -1.0,\n        ];\n        let color = new Array();\n        for (let i = 0; i < 6; i++) {\n            color.push(1.0, 1.0, 1.0, 1.0);\n        }\n        shader.draw(this.canvas.getGL(), this.canvas.getFrameBuffer(),\n                    this.canvas.getGL().TRIANGLES,    \n                    texture.getTexture(), position, color, 6,\n                    this.canvas.getMatrix());\n        this.canvasLayer = new Layer(ID_CANVAS_LAYER, texture.getTexture()); \n    }\n\n    // テクスチャを元にレイヤーを末尾に追加する\n    public addLayer(texture: WebGLTexture): void {\n        let id = this.layers.length;\n        let layer = new Layer(id, texture);\n        this.layers.push(layer);\n        this.updateCanvas();\n    }\n\n    // キャンバスレイヤーを取得する\n    public getCanvasLayer(): Layer {\n        return this.canvasLayer;\n    }\n\n    // レイヤーを合成する\n    // テクスチャを下のレイヤーに合成する\n    // layer2の管理はこのメソッドを呼び出した側で行う\n    public composeLayer(layer1: Layer, layer2: Layer): void {\n        let gl = this.canvas.getGL();\n        let buffer = this.canvas.getFrameBuffer();\n        let outTex = new Texture();\n        outTex.makeTexture(gl);\n        this.composeShader.draw(gl, buffer, layer2.getTexture(),\n                                layer1.getTexture(), outTex.getTexture(), this.canvas.getMatrix());\n        layer1.setTexture(outTex.getTexture());                                      \n    }\n\n    // 全てのレイヤーをキャンバスレイヤーに合成する\n    public composeToCanvas(): void {\n        for (let i = 0; i < this.layers.length; i++) {\n            this.composeLayer(this.canvasLayer, this.layers[i]);\n        }\n    }\n\n    // キャンバスレイヤーの描画を更新する\n    public updateCanvas(): void {\n        this.composeToCanvas();\n        let shader = new TextureShader();\n        shader.draw(this.canvas.getGL(),\n                    this.canvasLayer.getTexture(),\n                    this.canvas.getMatrix());\n    }\n}","import { Vector } from '../Math/Vector';\nimport { Matrix } from '../Math/Matrix';\n\n// キャンバスクラス\nexport class GlCanvas {\n    private gl: WebGLRenderingContext;      // glコンテキスト\n    private canvas: HTMLCanvasElement;      // キャンバス \n    private frameBuffer: WebGLFramebuffer;  // フレームバッファ\n    private position: Vector;               // キャンバスの位置\n    private scale: number;                  // 拡大率\n    private degree: number                  // 角度\n    private matrix: Matrix;                 // 行列\n\n    // コンストラクタ\n    // @param canbasId キャンバスID\n    // @param width 幅\n    // @param height 高さ\n    constructor(canvasId: string, width: number, height: number) {\n        this.canvas = this.getCanvasContext(canvasId, width, height);\n        this.gl = this.getGlContext();\n        this.frameBuffer = this.gl.createFramebuffer();\n        this.position = new Vector();\n        this.scale = 1.0;\n        this.degree = 0.0;\n        this.matrix = new Matrix();\n    }\n\n    // キャンバスコンテキストを取得する    \n    // @param canbasId キャンバスID\n    // @param width 幅\n    // @param height 高さ\n    private getCanvasContext(canvasId: string, width: number,\n                             height: number): HTMLCanvasElement {\n        var cnvs = <HTMLCanvasElement>document.getElementById(canvasId);\n        cnvs.width = width;\n        cnvs.height = height;\n        return cnvs;\n    }\n\n    // glコンテキストを取得する\n    private getGlContext(): WebGLRenderingContext {\n        var gl = this.canvas.getContext(\"experimental-webgl\",\n                                        { preserveDrawingBuffer: true });\n        if (!gl) { // コンテキストを取得できなかったとき\n            return null;\n        }\n        this.initGlContext(gl);\n        return gl;\n    }\n\n    // glコンテキストを初期化する\n    private initGlContext(gl: WebGLRenderingContext): void {\n        gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n\n    // キャンバスを取得する\n    public getCanvas(): HTMLCanvasElement {\n        return this.canvas;\n    }\n\n    // glコンテキストを取得する\n    public getGL(): WebGLRenderingContext {\n        return this.gl;\n    }\n\n    // フレームバッファを取得する\n    public getFrameBuffer(): WebGLFramebuffer {\n        return this.frameBuffer;\n    }\n\n    // キャンバスサイズを設定する\n    // @param width 幅\n    // @param height 高さ\n    public setCanvasSize(width: number, height: number): void {\n        this.canvas.width = width;\n        this.canvas.height = height;\n    }\n\n    // キャンバスサイズを取得する\n    public getCanvasSize(): Vector {\n        let size = new Vector();\n        size.setXY(this.canvas.width, this.canvas.height);\n        return size;\n    }\n\n    // キャンバス上の座標を計算する\n    public getCanvasCoordinate(event: MouseEvent): Vector {\n        var cv = <HTMLCanvasElement>event.target;\n        var rect = cv.getBoundingClientRect();\n        var px = event.clientX - rect.left;\n        var py = event.clientY - rect.top;\n        var x = 2 * px / this.canvas.width - 1;\n        var y = 2 * py / this.canvas.height - 1;\n        let vec = new Vector();\n        vec.setXY(px, py);\n        return vec;\n    }\n\n    // キャンバス上の座標を設定する\n    public setCanvasCoordinate(event: MouseEvent): void {\n        this.position = this.getCanvasCoordinate(event);\n        this.matrix.setMatrix(this.gl, this.position, this.degree, this.scale);\n    }\n\n    // 角度を設定する\n    public setDegree(deg: number): void {\n        this.degree = deg;\n        this.matrix.setMatrix(this.gl, this.position, this.degree, this.scale);\n    }\n\n    // 拡大率を設定する\n    public setScale(aScale: number): void {\n        this.scale = aScale;\n        this.matrix.setMatrix(this.gl, this.position, this.degree, this.scale);\n    }\n\n    // 行列を取得する\n    public getMatrix(): Float32Array {\n        return this.matrix.getMatrixArray();\n    }\n\n    // キャンバスを保存する\n    public saveCanvas(): void {\n        let imageType = \"image/png\";\n        let fileName = \"art_woerk.png\";\n        let dataUrl = this.canvas.toDataURL(imageType);\n        let blob = this.Base64toBlob(dataUrl);\n        this.saveBlob(blob, fileName);\n    }\n\n    // Base64データをBlob型に変換する\n    // https://st40.xyz/one-run/article/133/\n    public Base64toBlob(base64) {\n        // カンマで分割して以下のようにデータを分ける\n        // tmp[0] : データ形式（data:image/png;base64）\n        // tmp[1] : base64データ（iVBORw0k～）\n        var tmp = base64.split(',');\n        // base64データの文字列をデコード\n        var data = atob(tmp[1]);\n        // tmp[0]の文字列（data:image/png;base64）からコンテンツタイプ（image/png）部分を取得\n\t    var mime = tmp[0].split(':')[1].split(';')[0];\n        //  1文字ごとにUTF-16コードを表す 0から65535 の整数を取得\n\t    var buf = new Uint8Array(data.length);\n\t    for (var i = 0; i < data.length; i++) {\n            buf[i] = data.charCodeAt(i);\n        }\n        // blobデータを作成\n\t    var blob = new Blob([buf], { type: mime });\n        return blob;\n    }\n\n    // 画像をダウンロードする\n    // https://st40.xyz/one-run/article/133/\n    public saveBlob(blob, fileName) {\n        let url = (window.URL);\n        // ダウンロード用のURL作成\n        var dataUrl = url.createObjectURL(blob);\n        // イベント作成\n        var event = document.createEvent(\"MouseEvents\");\n        event.initMouseEvent(\"click\", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        // a要素を作成\n        var a = <HTMLAnchorElement>document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\");\n        // ダウンロード用のURLセット\n        a.href = dataUrl;\n        // ファイル名セット\n        a.download = fileName;\n        // イベントの発火\n        a.dispatchEvent(event);\n    }  \n}","import { Vector } from \"../Math/Vector\";\nimport { Matrix } from \"../Math/Matrix\";\n\nlet COLLUSION_OFFSET = 35;\n\n// つまみクラス\nexport class Knob {\n    private isSelected: boolean     // 選択されているか(ある位置に設定されているか)\n    private isEnable: boolean       // 有効か\n    private canvasPosition: Vector  // キャンバス内の位置\n    private globalPosition: Vector  // 親要素内の位置\n    private traslateMatrix: Matrix  // 移動用の行列\n    private element: HTMLButtonElement    // html上の要素\n\n    // コンストラクタ\n    constructor(id: string) {\n        this.element = document.createElement('button');\n        this.element.id = id;\n        this.init();\n    }\n\n    // つまみを初期化する\n    private init(): void {\n        this.element.style\n        this.element.style.backgroundColor = \"rgb(100, 100, 100)\";\n        this.element.style.width = \"12px\";\n        this.element.style.height = \"12px\";\n        this.element.style.position = \"absolute\";\n        this.element.style.zIndex = \"99\";\n        this.element.style.borderRadius = \"50%\";\n        this.element.style.display = \"inline-block\";\n        this.element.style.pointerEvents = \"none\";\n        this.element.disabled = true;\n        this.canvasPosition = new Vector();\n        this.globalPosition = new Vector();\n        this.isSelected = false;\n        this.isEnable = true;\n        this.traslateMatrix = new Matrix();\n    }\n\n    // アンカースタイルに変更する\n    public setAnchorStyle(): void {\n        this.element.style.backgroundColor = \"rgb(1, 175, 255)\";\n        let offset = new Vector();\n        offset.setXY(100, 100);\n        this.canvasPosition.add(offset);\n        this.globalPosition.add(offset);\n    }\n\n    // つまみを親要素に追加する\n    public addKnob(parent: HTMLElement, before: HTMLElement): void {\n        parent.insertBefore(this.element, before);\n    }\n\n    // 選択されているか\n    public getIsSelected(): boolean {\n        return this.isSelected;\n    }\n\n    // 選択状態を設定する\n    public setIsSelected(state: boolean): void {\n        if (this.isEnable) {\n            this.isSelected = state;\n        }\n    }\n\n    // 要素を取得する\n    public getElement(): HTMLElement {\n        return this.element;\n    }\n\n    // キャンバス上の位置を設定する\n    public setCanvasPosition(pos: Vector): void {\n        if (this.isEnable) {\n            this.canvasPosition = pos;\n        }\n    }\n\n    // キャンバス上の位置を取得する\n    public getCanvasPosition(): Vector {\n        return this.canvasPosition;\n    }\n\n    // 親要素上の位置を設定する\n    public setGlobalPosition(pos: Vector): void {\n        if (this.isEnable) {\n            this.globalPosition = pos;\n        }\n    }\n\n    // 親要素上の位置を取得する\n    public getGlobalPosition(): Vector {\n        return this.globalPosition;\n    }\n\n    // 有効かどうか設定する\n    public setIsEnable(state: boolean): void {\n        this.isEnable = state;\n        if (this.isEnable) {\n            this.showKnob();\n        } else {\n            this.hideKnob();\n        }\n    }\n\n    // 有効かどうか取得する\n    public getIsEnable(): boolean {\n        return this.isEnable;\n    }\n\n    // つまみを表示する\n    public showKnob(): void {\n        this.init();\n        this.element.style.display = \"inline-block\";\n    } \n\n    // つまみを隠す\n    public hideKnob(): void {\n        this.element.style.display = \"none\";\n    }\n\n    // 当たり判定\n    public isCollusion(pos: Vector): boolean {\n        if (pos.getX() >= this.canvasPosition.getX() &&\n            pos.getX() <= this.canvasPosition.getX() - this.element.clientWidth / 2 + COLLUSION_OFFSET &&\n            pos.getY() >= this.canvasPosition.getY() &&\n            pos.getY() <= this.canvasPosition.getY() + this.element.clientHeight/ 2 + COLLUSION_OFFSET) {\n            return true;\n        }\n        return false;\n    }\n\n    // 描画する\n    public draw() {\n        this.traslateMatrix.setStyleTransform(this.element, this.globalPosition);\n    }\n}","// レイヤークラス\nexport class Layer {\n    private layerId: number;        // レイヤーのID\n    private texture: WebGLTexture;  // 保持している描画結果\n\n    // コンストラクタ\n    constructor(id: number, tex: WebGLTexture) {\n        this.layerId = id;\n        this.texture = tex;\n    }\n\n    // IDを取得する\n    public getLayerId(): number {\n        return this.layerId;\n    }\n\n    // テクスチャを設定する\n    public setTexture(tex: WebGLTexture): void {\n        this.texture = tex;\n    }\n\n    // テクスチャを取得する\n    public getTexture(): WebGLTexture {\n        return this.texture;\n    }\n}","// Mathクラス\nexport class MathTools {\n\n    // コンストラクタ\n    constructor() {}\n\n    // 角度をラジアンに変換する\n    public deg2Rad(degree: number): number {\n        return degree * (Math.PI / 180);\n    }\n\n    // 階乗を計算する\n    public calculateFactorial(n: number): number {\n        let ret = 1.0;\n        for (let i = 2; i <= n; i++) {\n            ret *= i;\n        }\n        return ret;\n    }\n\n    // 二項展開を計算する\n    public calculateBinominal(n: number, i: number): number {\n        // 余分な部分を(n - i)で消す\n        let numer = this.calculateFactorial(n);\n        let denom = this.calculateFactorial(i) * this.calculateFactorial(n - i);\n        return numer / denom;\n    }\n\n    // バーステイン基底関数を求める\n    public calculateBerstein(n: number, i: number, t: number): number {\n        // 二項係数 * t^i * (1-t)^(n-i)\n        let b = this.calculateBinominal(n, i);\n        let t0 = Math.pow(t, i);\n        let t1 = Math.pow(1 - t, n - i);\n        return b * t0 * t1; \n    }\n}","import { MathTools } from \"./MathTool\";\nimport { Vector } from \"./Vector\";\nimport { mat4 } from \"gl-matrix\";\n\n// 行列クラス\nexport class Matrix {\n    private mMatrix: mat4;      // モデル行列\n    private vpMatrix: mat4;     // ビュー・プロジェクション行列\n    private mvpMatrix: mat4;    // モデル・ビュー・プロジェクション行列\n\n    // コンストラクタ\n    constructor() {\n        this.mMatrix = mat4.create();    \n        this.vpMatrix = mat4.create();\n        this.mvpMatrix = mat4.create();\n        mat4.identity(this.mMatrix);\n        mat4.identity(this.vpMatrix);    \n        mat4.identity(this.mvpMatrix);\n    }\n\n    // ビュー行列とプロジェクション行列を設定する\n    public setViewProjectionMatrix(gl: WebGLRenderingContext): void {\n        let vMatrix = mat4.create();\n        let pMatrix = mat4.create();\n        mat4.identity(vMatrix);\n\n        // ビュー座標変換\n        let eye = [0.0, 0.0, 1.0]; // カメラ位置\n        let center = [0, 0, 0]; // 中視点\n        let up = [0, 1, 0]; // カメラ上方向\n        mat4.lookAt(vMatrix, eye, center,up);\n\n        // プロジェクション座標変換\n        mat4.identity(pMatrix);\n        let fovy = 45; // 視野角\n        var aspect = gl.canvas.width / gl.canvas.height; // アスペクト比\n        var near = 0.1; // ニアクリップ\n        var far = 100; // ファークリップ\n        mat4.perspective(pMatrix,fovy, aspect, near, far);\n        mat4.multiply(this.vpMatrix, pMatrix, vMatrix);\n    }\n\n    // モデルを移動する\n    public translateModel(trans: Vector): void {\n        mat4.identity(this.mMatrix);\n        mat4.translate(this.mMatrix, this.mMatrix,\n                      [trans.getX(), trans.getY(), 0.0]);\n    }\n\n    // モデルを回転する\n    public rotateModel(degree: number): void {\n        let mt = new MathTools();\n        let rad = mt.deg2Rad(degree);\n        var axis = [0.0, 0.0, 1.0];\n        mat4.rotate(this.mMatrix, this.mMatrix, rad, axis);\n    }\n    \n    // モデルを拡大・縮小する\n    public scaleModel(scale: number): void {\n        mat4.scale(this.mMatrix, this.mMatrix, [scale, scale, scale]);\n    }\n\n    // 行列を設定する\n    public setMatrix(gl: WebGLRenderingContext, trans: Vector, degree: number,\n                     scale: number): void {\n        this.setViewProjectionMatrix(gl);\n        this.translateModel(trans);\n        this.rotateModel(degree);\n        this.scaleModel(scale);\n        this.setViewProjectionMatrix(gl);\n        mat4.multiply(this.mvpMatrix, this.mMatrix, this.vpMatrix); \n    }\n\n    // 行列を取得する\n    // 行列を使用する側には配列で渡す\n    public getMatrixArray(): Float32Array {\n        return this.mvpMatrix;\n    }\n    \n    // 行列を文字列で取得する\n    private getMatrixString(pos: Vector): string {\n        let matrix = mat4.create();\n        mat4.identity(matrix);\n        mat4.translate(matrix, matrix,\n                  [pos.getX(), pos.getY(), -1.0]);\n\n        let rad = 0;\n        var axis = [0.0, 0.0, 1.0];\n        mat4.rotate(matrix, matrix, rad, axis);\n\n        mat4.scale(matrix, matrix, [1, 1, 1]);\n        return matrix.toString();\n    }\n    \n    // trasfomr属性を設定する\n    public setStyleTransform(element: HTMLElement, pos: Vector): void {\n        let matrix = this.getMatrixString(pos);\n        let matrixFunction = \"matrix3d\"  + \"(\" + matrix + \")\";\n        element.style.transform = matrixFunction;\n    }\n}","// 2次元ベクトルクラス\nexport class Vector {\n    private x: number;\n    private y: number;\n\n    // コンストラクタ\n    constructor() {\n        this.x = 0;\n        this.y = 0;\n    }\n    // xを取得する\n    public getX(): number {\n        return this.x;\n    }\n    // xを設定する\n    public setX(aX: number): void {\n        this.x = aX;\n    }\n    // yを取得する\n    public getY(): number {\n        return this.y;\n    }\n    // yを設定する\n    public setY(aY: number): void {\n        this.y = aY;\n    }\n    // x,yを設定する\n    public setXY(aX: number, aY: number): void {\n        this.x = aX;\n        this.y = aY;\n    }\n    // x,yを設定するVector版\n    public set(vec: Vector): void {\n        this.x = vec.x;\n        this.y = vec.y;\n    }\n    // 加算する\n    public add(vec: Vector): void {\n        this.x += vec.x;\n        this.y += vec.y;\n    }\n    // 減算する\n    public sub(vec: Vector): void {\n        this.x -= vec.x;\n        this.y -= vec.y;\n    }\n    // 乗算する\n    public multiply(m: number): void {\n        this.x *= m;\n        this.y *= m;\n    }\n    // 除算する\n    public divide(d: number): void {\n        this.x /= d;\n        this.y /= d;\n    }\n    // 等しいか\n    public equals(vec: Vector): boolean {\n        return this.x === vec.x && this.y === vec.y;\n    }\n    // 距離を取得する\n    public distance(vec: Vector): number {\n        let dx = this.x - vec.x;\n        let dy = this.y - vec.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    // 大きさを求める\n    public norm(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n\n// フラグメントシェーダー\nlet fsTex =  \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"uniform float u_Brightness;\\n\"\n            + \"uniform float u_Contrast;\\n\"\n\n            + \"void main() {\\n\"\n            + \"    vec4 tex = texture2D(u_Sampler, vTextureCoord);\\n\"       \n            + \"    tex.rgb += u_Brightness;\\n\"\n            + \"    if (u_Contrast > 0.0) {\\n\"\n            + \"        tex.rgb = (tex.rgb - 0.5) / (1.0 - u_Contrast) + 0.5;\\n\"\n            + \"    } else {\\n\"\n            + \"        tex.rgb = (tex.rgb - 0.5) * (1.0 + u_Contrast) + 0.5;\\n\"\n            + \"    }\\n\"\n            + \"    gl_FragColor = tex;\\n\"\n            +\"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// 明るさ・コントラストを調整するシェーダークラス\nexport class BrightnessContrastShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array, brightness: number, contrast: number): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n        let u_Brightness = gl.getUniformLocation(prg, \"u_Brightness\");\n        let u_Contrast = gl.getUniformLocation(prg, \"u_Contrast\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        gl.uniform1f(u_Brightness, brightness);\n        gl.uniform1f(u_Contrast, contrast);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// 普通合成\nlet fsNormal = \"precision highp float;\"\n            +　\"uniform sampler2D u_SrcTexture;\"    \n            +　\"uniform sampler2D u_DstTexture;\"    \n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"void main() {\\n\"\n            +    \"vec4 src = texture2D(u_SrcTexture, vTextureCoord);\"\n            +    \"vec4 dst = texture2D(u_DstTexture, vTextureCoord);\"\n            +    \"if (src.a != 0.) {\\n\"\n            +    \"  gl_FragColor = src;\\n\"\n            +    \"} else {\\n\"\n            +    \"  gl_FragColor = dst;\\n\"\n            +    \"}\"\n            + \"}\";\n\nlet fsNotImage = \"precision highp float;\"\n            +　\"uniform sampler2D u_SrcTexture;\"    \n            +　\"uniform sampler2D u_DstTexture;\"    \n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"void main() {\\n\"\n            +    \"vec4 src = texture2D(u_SrcTexture, vTextureCoord);\"\n            +    \"vec4 dst = texture2D(u_DstTexture, -vTextureCoord);\"\n            +    \"if (src.a != 0.) {\\n\"\n            +    \"  gl_FragColor = src;\\n\"\n            +    \"} else {\\n\"\n            +    \"  gl_FragColor = dst;\\n\"\n            +    \"}\"\n            +\"}\";\n\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 1.0,\n    1.0, 1.0,\n    0.0, 0.0,\n\n    0.0, 0.0,\n    1.0, 1.0,\n    1.0, 0.0\n];\n\n// 普通合成クラス\nexport class ComposeNormalShader extends Shader{\n\n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public drawNotImage(gl: WebGLRenderingContext, src: WebGLTexture,\n                      dst: WebGLTexture, matrix: Float32Array): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsNotImage);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n        \n        // 変数の取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_SrcTexture = gl.getUniformLocation(prg, \"u_SrcTexture\");\n        let u_DstTexture = gl.getUniformLocation(prg, \"u_DstTexture\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n        \n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, src);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, dst);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_SrcTexture, 0);\n        gl.uniform1i(u_DstTexture, 1);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        \n        // 描画\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, frameBuffer: WebGLFramebuffer,\n                src: WebGLTexture, dst: WebGLTexture, out: WebGLTexture,\n                matrix: Float32Array): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsNormal);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n        \n        // 変数の取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_SrcTexture = gl.getUniformLocation(prg, \"u_SrcTexture\");\n        let u_DstTexture = gl.getUniformLocation(prg, \"u_DstTexture\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n        \n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, src);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, dst);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_SrcTexture, 0);\n        gl.uniform1i(u_DstTexture, 1);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n\n        // フレームバッファをバインド\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,                         out, 0);\n        \n        // 描画\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n        // バインドの解除\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);  \n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n\n// フラグメントシェーダー\nlet fsTex = \"precision mediump float;\\n\"\n    + \"uniform sampler2D u_Sampler;\\n\"\n    + \"uniform vec2 u_TexSize;\\n\"\n    + \"uniform float u_Radius;\\n\"\n    + \"uniform float u_Strength;\\n\"\n    + \"uniform vec2 u_Center;\\n\"\n    + \"varying vec2 vTextureCoord;\\n\"\n    + \"void main() {\\n\"\n    + \"    vec2 coord = vTextureCoord * u_TexSize;\\n\"\n    + \"    coord -= u_Center;\\n\"\n    + \"    float distance = length(coord);\\n\"\n    + \"    if (distance < u_Radius) {\\n\"\n    + \"        float percent = distance / u_Radius;\\n\"\n    + \"        if (u_Strength > 0.0) {\\n\"\n    + \"             coord *= mix(1.0, smoothstep(0.0, u_Radius / distance, percent), u_Strength * 0.75);\\n\"\n    + \"        } else {\\n\"\n    + \"             coord *= mix(1.0, pow(percent, 1.0 + u_Strength * 0.75) * u_Radius / distance, 1.0 - percent);\\n\"\n    + \"         }\\n\"\n    + \"    }\\n\"\n    + \"    coord += u_Center;\\n\"\n    + \"    gl_FragColor = texture2D(u_Sampler, coord / u_TexSize);\\n\"\n    + \"    vec2 clampedCoord = clamp(coord, vec2(0.0), u_TexSize);\\n\"\n    + \"    if (coord != clampedCoord) {\\n\"\n    + \"        gl_FragColor.a *= max(0.0, 1.0 - length(coord - clampedCoord));\\n\"\n    + \"    }\\n\"\n    + \"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// 膨張シェーダークラス\nexport class ExpansionShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array, x: number, y: number, radius: number,\n                strength: number): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_TexSize = gl.getUniformLocation(prg, \"u_TexSize\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n        let u_Center = gl.getUniformLocation(prg, \"u_Center\");\n        let u_Radius = gl.getUniformLocation(prg, \"u_Radius\");\n        let u_Strength = gl.getUniformLocation(prg, \"u_Strength\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        gl.uniform2f(u_Center, x, y);\n        gl.uniform2f(u_TexSize ,gl.canvas.width, gl.canvas.height);\n        gl.uniform1f(u_Radius, radius);\n        gl.uniform1f(u_Strength, strength);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// フラグメントシェーダー\nlet fsTex =  \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"uniform float u_Radius;\\n\"\n            + \"uniform vec2 u_Resolution;\\n\"\n    \n            + \"float rand(vec2 co) {\\n\"\n            + \"   float a = fract(dot(co, vec2(2.067390879775102, 12.451168662908249))) - 0.5;\\n\"\n            + \"   float s = a * (6.182785114200511 + a * a * (-38.026512460676566 + a * a * 53.392573080032137));\\n\"\n            + \"   float t = fract(s * 43758.5453);\\n\"\n            + \"   return t;\\n\"\n            + \"}\\n\"\n    \n            + \"void main() {\\n\"\n            + \"    float radius = u_Radius;\\n\"\n            + \"    vec2 coord = vTextureCoord;\\n\"\n            + \"    float x = (coord.x * u_Resolution.x) + rand(coord) * radius * 2.0 - radius;\\n\"\n            + \"    float y = (coord.y * u_Resolution.y) + rand(vec2(coord.y, coord.x)) * radius * 2.0 - radius;\\n\"\n            + \"    gl_FragColor = texture2D(u_Sampler, vec2(x, y) / u_Resolution);\\n\"\n            +\"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// 階調化描画するシェーダークラス\nexport class ForestedGlassShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array, radius: number): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n        let u_Radius = gl.getUniformLocation(prg, \"u_Radius\");\n        let u_Resolution = gl.getUniformLocation(prg, \"u_Resolution\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        gl.uniform1f(u_Radius, radius);\n        gl.uniform2f(u_Resolution, gl.canvas.width, gl.canvas.height);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import {Shader} from './Shader';\n\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\nlet fsGrad = 　\"precision highp float;\"\n            +　\"uniform sampler2D u_GradTexture;\"\n            +　\"uniform sampler2D u_SrcTexture;\"    \n            +  \"varying vec2 vTextureCoord;\\n\"\n            +  \"void main() {\\n\"\n            +    \"vec4 src = texture2D(u_SrcTexture, vTextureCoord);\"\n            +    \"float y = 0.299 * src.r + 0.587 * src.g + 0.114 * src.b;\"\n            +    \"vec4 grad = texture2D(u_GradTexture, vec2(y, 0.5));\"\n            +    \"gl_FragColor = vec4(grad.r, grad.g, grad.b, src.a);\\n\"\n            +\"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// グラデーションシェーダ\nexport class GradationShader extends Shader {\n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, gradation: WebGLTexture,\n                src: WebGLTexture, matrix: Float32Array): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsGrad);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_GradTexture = gl.getUniformLocation(prg, \"u_GradTexture\");\n        let u_SrcTexture = gl.getUniformLocation(prg, \"u_SrcTexture\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, gradation);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, src);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_GradTexture, 0);\n        gl.uniform1i(u_SrcTexture, 1);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    } \n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// フラグメントシェーダー\nlet fsTex =  \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"void main() {\\n\"\n            + \"    vec4 tex = texture2D(u_Sampler, vTextureCoord);\\n\"\n            + \"    float y = 0.299 * tex.r + 0.587 * tex.g + 0.114 * tex.b;\"\n            + \"    vec4 color = vec4(y, y, y, tex.a);\"\n            + \"    gl_FragColor = color;\\n\"\n            +\"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// グレースケール描画するシェーダークラス\nexport class GrayscaleShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// フラグメントシェーダー\nlet fsTex =   \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"uniform float u_Hue;\\n\"\n            + \"uniform float u_Saturation;\\n\"\n            + \"void main() {\\n\"\n            + \"    vec4 tex = texture2D(u_Sampler, vTextureCoord);\\n\"  \n            + \"    float angle = u_Hue * 3.14159265;\\n\"\n            + \"    float s = sin(angle), c = cos(angle);\\n\"\n            + \"    vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0)\"\n            + \"                    * s - c) + 1.0) / 3.0;\\n\"\n            + \"    float len = length(tex.rgb);\\n\"\n            + \"    tex.rgb = vec3(dot(tex.rgb, weights.xyz),\" \n            + \"                   dot(tex.rgb, weights.zxy),\"\n            + \"                   dot(tex.rgb, weights.yzx));\\n\"\n            + \"    float average = (tex.r + tex.g + tex.b) / 3.0;\\n\"\n            + \"    if (u_Saturation > 0.0) {\\n\"\n            + \"        tex.rgb += (average - tex.rgb) * \"\n            + \"                   (1.0 - 1.0 / (1.001 - u_Saturation));\\n\"\n            + \"    } else {\\n\"\n            + \"        tex.rgb += (average - tex.rgb) * (-u_Saturation);\\n\"\n            + \"    }\\n\"\n            + \"    gl_FragColor = tex;\\n\"\n            + \"}\";\n            \n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// 明るさ・コントラストを調整するシェーダークラス\nexport class HueSaturationShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array, hue: number, sarturation: number): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n        let u_Hue = gl.getUniformLocation(prg, \"u_Hue\");\n        let u_Saturation = gl.getUniformLocation(prg, \"u_Saturation\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        gl.uniform1f(u_Hue, hue);\n        gl.uniform1f(u_Saturation, sarturation);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// フラグメントシェーダー\nlet fsTex =  \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"void main() {\\n\"\n            + \"    vec4 tex = texture2D(u_Sampler, vTextureCoord);\\n\"\n            + \"    vec4 color = vec4(1.0 - tex.r, 1.0 - tex.g, 1.0 - tex.b,\"\n            + \"                      tex.a); \\n\"\n            + \"    gl_FragColor = color;\\n\"\n            +\"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// 色反転を描画するシェーダークラス\nexport class InvertShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// フラグメントシェーダー\nlet fsTex =   \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"uniform vec2 u_Center;\\n\"\n            + \"uniform float u_Scale;\\n\"\n            + \"uniform vec2 u_TexSize;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"void main() {\\n\"\n            + \"    vec2 tex = (vTextureCoord * u_TexSize - u_Center) / u_Scale;\\n\"\n            + \"    tex.y /= 0.866025404;\\n\"\n            + \"    tex.x -= tex.y * 0.5;\\n\"\n\n            + \"    vec2 a;\\n\"\n            + \"    if (tex.x + tex.y - floor(tex.x) - floor(tex.y) < 1.0) {\\n\"\n            + \"        a = vec2(floor(tex.x), floor(tex.y));\\n\"\n            + \"    } else {\\n\"\n            + \"        a = vec2(ceil(tex.x), ceil(tex.y));\\n\"\n            + \"    }\\n\"\n            + \"    vec2 b = vec2(ceil(tex.x), floor(tex.y));\\n\"\n            + \"    vec2 c = vec2(floor(tex.x), ceil(tex.y));\\n\"\n            + \"    vec3 TEX = vec3(tex.x, tex.y, 1.0 - tex.x - tex.y);\\n\"\n            + \"    vec3 A = vec3(a.x, a.y, 1.0 - a.x - a.y);\\n\"\n            + \"    vec3 B = vec3(b.x, b.y, 1.0 - b.x - b.y);\\n\"\n            + \"    vec3 C = vec3(c.x, c.y, 1.0 - c.x - c.y);\\n\"\n            + \"    float alen = length(TEX - A);\\n\"\n            + \"    float blen = length(TEX - B);\\n\"\n            + \"    float clen = length(TEX - C);\\n\"\n            \n            + \"vec2 choice;\\n\"\n            + \"if (alen < blen) {\\n\"\n            + \"    if (alen < clen) {\\n\"\n            + \"        choice = a;\\n\"\n            + \"    } else {\\n\"\n            + \"        choice = c;\\n\"\n            + \"    }\\n\"\n            + \"} else {\\n\"\n            + \"    if (blen < clen) {\\n\"\n            + \"        choice = b;\\n\"\n            + \"    } else {\\n\"        \n            + \"        choice = c;\\n\"\n            + \"    }\\n\"\n            + \"}\\n\"\n            + \"choice.x += choice.y * 0.5;\\n\"\n            + \"choice.y *= 0.866025404;\\n\"\n            + \"choice *= u_Scale / u_TexSize;\\n\"\n            + \"gl_FragColor = texture2D(u_Sampler, choice + u_Center / u_TexSize);\\n\"\n            + \"}\\n\";\n            \n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// 六角形ピクセル化するシェーダークラス\nexport class PixelateShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array, x: number, y: number, scale: number): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n        let u_Scale = gl.getUniformLocation(prg, \"u_Scale\");\n        let u_Center = gl.getUniformLocation(prg, \"u_Center\");\n        let u_TexSize = gl.getUniformLocation(prg, \"u_TexSize\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        gl.uniform1f(u_Scale, scale);\n        gl.uniform2f(u_TexSize, gl.canvas.width, gl.canvas.height);\n        gl.uniform2f(u_Center, x, y);\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import { Shader } from './Shader';\n\nlet vsPC =    \"attribute vec4 a_Position;\"\n            + \"attribute vec4 a_Color;\"\n            + \"varying vec4 v_Color;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main(){\"\n            + \"    gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\"\n            + \"    v_Color = a_Color;\"\n            + \"    gl_PointSize = 1.;\"\n            + \"}\";\n\nlet fsPC  =   \"precision mediump float;\"\n            + \"varying vec4 v_Color;\"\n            + \"void main(){\"\n            + \"    gl_FragColor = v_Color;\"\n            +\"}\";\n\n\n// 頂点座標と頂点色を元にした描画を行うシェーダー\nexport class PointColorShader extends Shader {\n\n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, frameBuffer: WebGLFramebuffer,\n                mode: number, texture: WebGLTexture, points: number[],\n                color: number[], count: number, matrix: Float32Array) {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsPC, fsPC);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n        \n        // 変数の取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let a_Color = gl.getAttribLocation(prg, \"a_Color\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n\n        // バッファのバインド\n        var pointBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, points);\n        var colorBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, color);\n      \n        // Attributeへのアタッチ\n        this.setAttrib(gl, a_Position, 2, pointBuffer);\n        this.setAttrib(gl, a_Color, 4, colorBuffer);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,\n                                texture, 0);\t\n        gl.drawArrays(mode, 0, count);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// フラグメントシェーダー\nlet fsTex =  \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"uniform float u_ToneLevel;\\n\"\n            + \"void main() {\\n\"\n            + \"    vec4 tex = texture2D(u_Sampler, vTextureCoord);\\n\"       \n            + \"    float step = 1.0 / (u_ToneLevel - 1.0);\"\n            + \"    float cr = step * floor(tex.r / step + 0.5);\"\n            + \"    float cg = step * floor(tex.g / step + 0.5);\"\n            + \"    float cb = step * floor(tex.b / step + 0.5);\"\n            + \"    gl_FragColor = vec4(cr, cg, cb, tex.a);\\n\"\n            +\"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// 階調化描画するシェーダークラス\nexport class PosterizationShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array, toneLevel: number): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n        let u_ToneLevel = gl.getUniformLocation(prg, \"u_ToneLevel\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        gl.uniform1f(u_ToneLevel, toneLevel);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// フラグメントシェーダー\nlet fsTex =  \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"uniform float u_SeedCount;\"\n\n            + \"float rand(vec2 co) {\\n\"\n            + \"   float a = fract(dot(co, vec2(2.067390879775102, 12.451168662908249))) - 0.5;\\n\"\n            + \"   float s = a * (6.182785114200511 + a * a * (-38.026512460676566 + a * a * 53.392573080032137));\\n\"\n            + \"   float t = fract(s * 43758.5453);\\n\"\n            + \"   return t;\\n\"\n            + \"}\\n\"\n\n            + \"void main() {\\n\"\n            + \"    vec4 tex = texture2D(u_Sampler, vec2(vTextureCoord.x,\"\n            + \"                                    1. - vTextureCoord.y));\\n\"       \n            + \"    if (rand(gl_FragCoord.xy) >= 0.95 + u_SeedCount) {\"\n            + \"        gl_FragColor = tex;\"\n            + \"    } else {\"\n            + \"        gl_FragColor = vec4(0.);\"\n            + \"    }\\n\"\n            +\"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// テクスチャからランダムに色を取るシェーダー\nexport class RandomSpouitShader extends Shader {    \n\n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, frameBuffer: WebGLFramebuffer,\n                src: WebGLTexture, dst: WebGLTexture, matrix: Float32Array,\n                seedCount: number): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n        let u_SeedCount = gl.getUniformLocation(prg, \"u_SeedCount\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER,textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, src);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        gl.uniform1f(u_SeedCount, seedCount);\n            \n        // フレームバッファをバインド\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,                         dst, 0);\n        \n        // 描画\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n        // バインドの解除\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);  \n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// フラグメントシェーダー\nlet fsTex =  \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"void main() {\\n\"\n            + \"    vec4 tex = texture2D(u_Sampler, vTextureCoord);\\n\"\n            + \"    float y = 0.299 * tex.r + 0.587 * tex.g + 0.114 * tex.b;\"\n            + \"    vec4 color = vec4(0.95 * y, 0.7 * y, 0.4 * y, tex.a);\"\n            + \"    gl_FragColor = color;\\n\"\n            +\"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// セピア描画するシェーダークラス\nexport class SepiaShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","// シェーダー基底クラス\nexport class Shader {\n\n    // コンストラクタ\n    constructor() {}\n\n    // バッファオブジェクトを取得する\n    public createBufferObject(gl: WebGLRenderingContext, target: number,\n                              data: number[]): WebGLBuffer {\n        let buffer = gl.createBuffer();\n        gl.bindBuffer(target, buffer);\n        if (target === gl.ARRAY_BUFFER) {\n            gl.bufferData(target, new Float32Array(data), gl.STATIC_DRAW);\n        } else if (target === gl.ELEMENT_ARRAY_BUFFER) {\n            gl.bufferData(target, new Int16Array(data), gl.STATIC_DRAW);\n        }\n        gl.bindBuffer(target, null);\n        return buffer;\n    }\n\n    // バッファと変数を紐付ける\n    public setAttrib(gl: WebGLRenderingContext, location: number, size: number,\n                     buffer: WebGLBuffer): void {\n        gl.enableVertexAttribArray(location);\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.vertexAttribPointer(location, size, gl.FLOAT, false, 0, 0);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n    \n    // シェーダーを作成する\n    private createShader(gl: WebGLRenderingContext, type: number,\n                         source: string): WebGLShader {\n        let shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) { // シェーダーの作成に成功したとき\n            return shader;\n        } else { // シェーダーの作成に失敗したとき\n            console.log(gl.getShaderInfoLog(shader));\n            gl.deleteShader(shader);\n            return null;\n        }\n    }\n\n    // プログラムを作成する\n    private createProgram(gl: WebGLRenderingContext, vertexShader: WebGLShader,\n                          fragmentShader: WebGLShader): WebGLProgram {\n        let program = gl.createProgram();\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        if (gl.getProgramParameter(program, gl.LINK_STATUS)) { // プログラムの作成に成功したとき\n            return program;\n        } else { // プログラムの作成に失敗したとき\n            console.log(gl.getProgramInfoLog(program));\n            gl.deleteProgram(program);\n            return null;\n        }\n    }\n\n    // プログラムを取得する\n    public getProgram(gl: WebGLRenderingContext, vSource: string, fSource: string) {\n        let vShader = this.createShader(gl, gl.VERTEX_SHADER, vSource);\n        let fShader = this.createShader(gl, gl.FRAGMENT_SHADER, fSource);\n        return this.createProgram(gl, vShader, fShader);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// フラグメントシェーダー\nlet fsTex =  \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"void main() {\\n\"\n            +    \"gl_FragColor = texture2D(u_Sampler, vTextureCoord);\\n\"\n            +\"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// テクスチャを描画するシェーダークラス\nexport class TextureShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// フラグメントシェーダー\nlet fsTex =  \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"uniform float u_Threshold;\\n\"\n            + \"void main() {\\n\"\n            + \"    vec4 tex = texture2D(u_Sampler, vTextureCoord);\\n\"   \n            + \"    float y = 0.299 * tex.r + 0.587 * tex.g + 0.114 * tex.b;\"\n            + \"    if(y <= u_Threshold) {\"\n            + \"        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n\"\n            + \"    } else {\"\n            + \"        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n\"\n            + \"    }\"\n            +\"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// 2値化描画するシェーダークラス\nexport class ThresholdShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array, threshold: number): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n        let u_Threshold = gl.getUniformLocation(prg, \"u_Threshold\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        gl.uniform1f(u_Threshold, threshold);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// フラグメントシェーダー\nlet fsTex =  \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"uniform float u_Threshold;\\n\"\n            + \"void main() {\\n\"\n            + \"    vec4 tex = texture2D(u_Sampler, vTextureCoord);\\n\"   \n            + \"     if (tex.r >= u_Threshold && tex.g >= u_Threshold && tex.b >= u_Threshold) {\"\n            + \"         gl_FragColor = vec4(1.0, 1.0, 1.0, 0.0);\"\n            + \"     } else {\"\n            + \"         gl_FragColor = tex;\\n\"\n            + \"     }\"\n            +\"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// 透明化(カラー)描画するシェーダークラス\nexport class TranspalentColorShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array, threshold: number): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n        let u_Threshold = gl.getUniformLocation(prg, \"u_Threshold\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        gl.uniform1f(u_Threshold, threshold);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";   \n\n// Readテクスチャ用のシェーダー\n// 母点に対応していれば座標をテクスチャに格納する\nlet fsRead =  \"precision highp float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"uniform vec2 u_Resolution;\\n\"\n\n            // 近似しているか(vec4版)\n            + \"bool approxEqual(const vec4 a, const vec4 b) {\\n\"\n            + \"    return all(lessThan(abs(a - b), vec4(0.005)));\\n\"\n            + \"}\\n\"\n\n            // 母点座標をテクスチャに保存するために変換する\n            + \"vec2 encodeCoordinate(const float value) {\\n\"\n            + \"   float v = value;\\n\"\n            + \"   return vec2(floor(v / 100.), mod(v, 100.));\\n\"\n            + \"}\\n\"\n\n            // 座標を格納したピクセルを作る\n            + \"vec4 createPixcel(const vec2 coord) {\\n\"\n            + \"    vec2 c = floor(coord);\\n\"\n            + \"    vec2 rg = encodeCoordinate(c.x);\\n\"\n            + \"    vec2 ba = encodeCoordinate(c.y);\\n\"    \n            + \"    return vec4(rg, ba) / 255.;\\n\"  \n            + \"}\"\n\n            // 無効なピクセルを作る\n            + \"vec4 createInvalidPixcel() {\\n\" \n            + \"    return createPixcel(vec2(5000., 5000.));\\n\"  \n            + \"}\\n\"\n    \n            + \"void main() {\\n\"\n            + \"    vec2 coord = gl_FragCoord.xy / u_Resolution;\\n\"\n            + \"    vec4 pixel = texture2D(u_Sampler, vec2(coord.x, 1. - coord.y));\\n\"\n            + \"    if (!approxEqual(pixel, vec4(0.))) {\\n\" // 母点対応点\n            + \"        gl_FragColor = createPixcel(gl_FragCoord.xy);\\n\"\n            + \"    } else {\\n\" // 母点に対応しない点\n            + \"        gl_FragColor = createInvalidPixcel();\\n\"\n            + \"    }\\n\"\n            + \"}\";\n\n// Writeテクスチャ用のシェーダー\n// 近傍のピクセルを読んで自身の色を決定する\nlet fsWrite = \"precision highp float;\\n\"\t\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"uniform int u_stepSize;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"uniform vec2 u_Resolution;\\n\"\n    \n            // 矩形内にあるか\n            + \"bool between(const vec2 value, const vec2 bottom, const vec2 top) {\\n\"\n            + \"   return (all(greaterThan(value, bottom)) && \"\n            + \"           all(lessThan(value, top)));\\n\"\n            + \"}\\n\"\n\n            // UV座標系におさまっているか\n            + \"bool isValidUv(const vec2 uv) {\\n\"\n            +    \"return between(uv, vec2(0., 0.), vec2(1., 1.));\\n\"\n            + \"}\\n\"\n\n            // 座標をデコードする\n            + \"float decodeCoordinate(const vec2 encodedCoordinate) {\\n\"\n            + \"   return encodedCoordinate.x * 100. + encodedCoordinate.y;\\n\"\n            + \"}\\n\"      \n    \n            // 母点近傍の座標を返す\n            + \"vec2 getSeedClosestCoord(const vec4 pixel) {\\n\"\n            + \"    vec4 p = pixel * 255.;\\n\"\n            + \"    float x = decodeCoordinate(p.rg);\\n\"\n            + \"    float y = decodeCoordinate(p.ba);\\n\"    \n            + \"    return vec2(x, y) + vec2(0.5);\\n\"  \n            + \"}\\n\"\n    \n            // 有効なピクセルか\n            + \"bool isValidPixel(const vec4 pixel) {\\n\"\n            + \"    vec2 coord = getSeedClosestCoord(pixel);\\n\"\n            + \"    return coord.x < 4999.;\\n\"\n            + \"}\\n\"\n\n            // 母点座標をテクスチャに保存するために変換する\n            + \"vec2 encodeCoordinate(const float value) {\\n\"\n            + \"   float v = value;\\n\"\n            + \"   return vec2(floor(v / 100.), mod(v, 100.));\\n\"\n            + \"}\\n\"    \n    \n            // 座標を格納したピクセルを作る\n            + \"vec4 createPixcel(const vec2 coord) {\\n\"\n            + \"    vec2 c = floor(coord);\\n\"\n            + \"    vec2 rg = encodeCoordinate(c.x);\\n\"\n            + \"    vec2 ba = encodeCoordinate(c.y);\\n\"    \n            + \"    return vec4(rg, ba) / 255.;\\n\"  \n            + \"}\"\n\n            // 無効なピクセルを作る\n            + \"vec4 createInvalidPixcel() {\\n\" \n            + \"    return createPixcel(vec2(5000., 5000.));\\n\"  \n            + \"}\\n\"\n\n            // JFAを計算する(対応する座標を格納する)\n            + \"vec4 jumpFlood(vec4 curPixel, vec2 offset) {\\n\"\n            + \"    vec2 refCoord = (gl_FragCoord.xy + offset) / u_Resolution;;\\n\"\n            + \"    vec4 refPixel = texture2D(u_Sampler, refCoord);\\n\"\n            + \"    if (!isValidUv(refCoord)) {\\n\"\n            + \"        refPixel = createInvalidPixcel();\\n\"\n            + \"    }\\n\"\n            + \"    if (!isValidPixel(refPixel)) {\\n\" //参照ピクセル無効のとき\n            + \"        return curPixel;\\n\"\n            + \"    } else if (!isValidPixel(curPixel)) {\\n\" // カレント無効のとき\n            + \"        return refPixel;\\n\" \n            + \"    } else {\\n\" // どちらも有効のとき\n            + \"        vec2 decodeC = getSeedClosestCoord(curPixel);\\n\"\n            + \"        vec2 decodeR = getSeedClosestCoord(refPixel);\\n\"\n            + \"        float disC = distance(gl_FragCoord.xy, decodeC);\\n\"\n            + \"        float disR = distance(gl_FragCoord.xy, decodeR);\\n\"\n            + \"        if (disC > disR) {\\n\" // カレントピクセルの方が遠いとき\n            + \"            return refPixel;\\n\"\n            + \"        }\"\n            + \"    }\\n\"\n            + \"    return curPixel;\"        \n            + \"}\\n\"\n\n            +\"void main(){\"\n            + \"   vec4 curPixel = texture2D(u_Sampler, gl_FragCoord.xy /\"\n            + \"                                                   u_Resolution);\"\n            +\"    curPixel = jumpFlood(curPixel, vec2(0, u_stepSize));\"\n            +\"    curPixel = jumpFlood(curPixel, vec2(u_stepSize, u_stepSize));\"\n            +\"    curPixel = jumpFlood(curPixel, vec2(u_stepSize, 0));\"\n            +\"    curPixel = jumpFlood(curPixel, vec2(u_stepSize, -u_stepSize));\"\n            +\"    curPixel = jumpFlood(curPixel, vec2(0, -u_stepSize));\"\n            +\"    curPixel = jumpFlood(curPixel, vec2(-u_stepSize, -u_stepSize));\"\n            +\"    curPixel = jumpFlood(curPixel, vec2(-u_stepSize, 0));\"\n            +\"    curPixel = jumpFlood(curPixel, vec2(-u_stepSize, u_stepSize));\" \n            +\"    gl_FragColor = curPixel;\"\t\t\t\t\t\n            +\"}\";\n\n// ボロノイ描画用のシェーダー\nlet fsVornoi = \"precision highp float;\"\n            + \"uniform sampler2D u_SeedTex;\"\n            + \"uniform sampler2D u_JumpFloodTex;\"    \n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"uniform vec2 u_Resolution;\\n\"\n    \n            // 座標をデコードする\n            + \"float decodeCoordinate(const vec2 encodedCoordinate) {\"\n            + \"   return encodedCoordinate.x * 100. + encodedCoordinate.y;\"\n            + \"}\"  \n\n            // 母点近傍の座標を返す\n            + \"vec2 getSeedClosestCoord(const vec4 pixel) {\"\n            + \"    vec4 p = pixel * 255.;\"\n            + \"    float x = decodeCoordinate(p.rg);\"\n            + \"    float y = decodeCoordinate(p.ba);\"    \n            + \"    return vec2(x, y) + vec2(0.5);\"  \n            + \"}\"  \n    \n            // 有効なピクセルか\n            + \"bool isValidPixel(const vec4 pixel) {\\n\"\n            + \"    vec2 coord = getSeedClosestCoord(pixel);\\n\"\n            + \"    return coord.x < 4999.;\\n\"\n            + \"}\\n\"   \n    \n            + \"void main() {\"\n            + \"    vec4 pixel = texture2D(u_JumpFloodTex, gl_FragCoord.xy /\"\n            + \"                                           u_Resolution);\"\n            + \"    if (isValidPixel(pixel)) {\"\n            + \"        vec2 coord = getSeedClosestCoord(pixel) / u_Resolution;\"\n            + \"        gl_FragColor=texture2D(u_SeedTex,vec2(coord.x, 1.- coord.y));\"\n            + \"    } else {\"\n            + \"        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\"\n            + \"    }\"\n            + \"}\";\n\n// 距離マップ描画用のシェーダー\nlet fsDis =   \"precision highp float;\"\n            + \"uniform sampler2D u_SeedTex;\"\n            + \"uniform sampler2D u_JumpFloodTex;\"    \n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"uniform vec2 u_Resolution;\\n\"\n    \n            // 座標をデコードする\n            + \"float decodeCoordinate(const vec2 encodedCoordinate) {\"\n            + \"   return encodedCoordinate.x * 100. + encodedCoordinate.y;\"\n            + \"}\"  \n\n            // 母点近傍の座標を返す\n            + \"vec2 getSeedClosestCoord(const vec4 pixel) {\"\n            + \"    vec4 p = pixel * 255.;\"\n            + \"    float x = decodeCoordinate(p.rg);\"\n            + \"    float y = decodeCoordinate(p.ba);\"    \n            + \"    return vec2(x, y) + vec2(0.5);\"  \n            + \"}\"  \n    \n            // 有効なピクセルか\n            + \"bool isValidPixel(const vec4 pixel) {\\n\"\n            + \"    vec2 coord = getSeedClosestCoord(pixel);\\n\"\n            + \"    return coord.x < 4999.;\\n\"\n            + \"}\\n\"   \n    \n            + \"void main() {\"\n            + \"    vec4 pixel = texture2D(u_JumpFloodTex, gl_FragCoord.xy /\"\n            + \"                                           u_Resolution);\"\n            + \"    vec2 coord = getSeedClosestCoord(pixel);\"\n            + \"    float dist = distance(gl_FragCoord.xy, coord);\"\n            + \"    dist = 1.0 - (dist / u_Resolution.x) / 0.7;\"\n            + \"    gl_FragColor = vec4(dist, dist, dist, 1.0);\"        \n            + \"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 1.0,\n    1.0, 1.0,\n    0.0, 0.0,\n\n    0.0, 0.0,\n    1.0, 1.0,\n    1.0, 0.0\n];\n\n// ボロノイ分割を計算するシェーダークラス\nexport class VoronoiShader extends Shader {\n    private program: WebGLProgram;\n    private readProgram: WebGLProgram;\n    private writeProgram: WebGLProgram;\n    private voronoiProgram: WebGLProgram;\n    private distanceProgram: WebGLProgram;\n    \n    // コンストラクタ\n    constructor() {\n        super();\n        this.program = null;\n        this.readProgram = null;\n        this.writeProgram = null;\n        this.voronoiProgram = null;\n        this.distanceProgram = null;\n    }\n\n    // プログラムを準備する\n    public prepareProgram(gl: WebGLRenderingContext): void {\n        this.readProgram = this.getProgram(gl, vsVert, fsRead);\n        this.writeProgram = this.getProgram(gl, vsVert, fsWrite);\n        this.voronoiProgram = this.getProgram(gl, vsVert, fsVornoi);\n        this.distanceProgram = this.getProgram(gl, vsVert, fsDis);\n    }\n\n    // Readテクスチャを作成する\n    public makeReadTexture(gl: WebGLRenderingContext, frameBuffer: WebGLFramebuffer,\n                           src: WebGLTexture, dst: WebGLTexture,\n                           matrix: Float32Array) {\n        gl.useProgram(this.readProgram);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n        \n        // インデックス取得\n        let a_Position = gl.getAttribLocation(this.readProgram, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(this.readProgram, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(this.readProgram, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(this.readProgram, \"u_mvpMatrix\");\n        let u_Resolution = gl.getUniformLocation(this.readProgram, \"u_Resolution\");\n        \n        //　バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, src);\n        \n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        gl.uniform2f(u_Resolution, gl.canvas.width, gl.canvas.height);\n        \n        // フレームバッファをバインド\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,                         dst, 0);\n        \n        // 描画\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n        // バインドの解除\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);  \n    }\n\n    // JFAを実行する\n    public runJumpFlood (gl: WebGLRenderingContext, frameBuffer: WebGLFramebuffer,\n                         src: WebGLTexture, dst: WebGLTexture,\n                         matrix: Float32Array, step: number) {\n        gl.useProgram(this.writeProgram);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n    \n        let a_Position = gl.getAttribLocation(this.writeProgram, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(this.writeProgram, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(this.writeProgram, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(this.writeProgram, \"u_mvpMatrix\");\n        let u_stepSize = gl.getUniformLocation(this.writeProgram, \"u_stepSize\");\n        let u_Resolution = gl.getUniformLocation(this.writeProgram, \"u_Resolution\");\n\n        //　バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, src);\n        \n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        gl.uniform1i(u_stepSize, step);\n        gl.uniform2f(u_Resolution, gl.canvas.width, gl.canvas.height);\n        \n        // フレームバッファをバインド\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,                         dst, 0);\n        \n        // 描画\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n        // バインドの解除\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);  \n    }\n\n    // ボロノイ分割の共通処理を行う\n    private runDrawVoronoiCommon(gl: WebGLRenderingContext, prg: WebGLProgram,\n                                 origin: WebGLTexture, jumped: WebGLTexture,\n                                 matrix: Float32Array): void {\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\t\n\t    let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n\t    let u_SeedTex = gl.getUniformLocation(prg, \"u_SeedTex\");\n        let u_JumpFloodTex = gl.getUniformLocation(prg, \"u_JumpFloodTex\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n\t    let u_Resolution = gl.getUniformLocation(prg, \"u_Resolution\");\n  \n        //　バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, origin);\n\t    gl.activeTexture(gl.TEXTURE1);\n\t    gl.bindTexture(gl.TEXTURE_2D, jumped);\n\t\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n\t    gl.uniform1i(u_SeedTex, 0);\n        gl.uniform1i(u_JumpFloodTex, 1);\n        gl.uniform2f(u_Resolution, gl.canvas.width, gl.canvas.height);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n\t\n\n    }\n\n    // ボロノイ分割を描画する\n    public drawVoronoi(gl: WebGLRenderingContext, origin: WebGLTexture,\n                       jumped: WebGLTexture, matrix: Float32Array): void {\n        this.runDrawVoronoiCommon(gl, this.voronoiProgram, origin, jumped, matrix);\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n\n    // 距離マップを描画する\n    public drawDistanceMap(gl: WebGLRenderingContext, origin: WebGLTexture,\n                           jumped: WebGLTexture, matrix: Float32Array): void {\n        this.runDrawVoronoiCommon(gl, this.distanceProgram, origin, jumped, matrix);\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import { Shader } from './Shader';\n\n// バーテックスシェーダー\nlet vsVert =  \"attribute vec4 a_Position;\\n\"\n            + \"attribute vec2 u_TexCoord;\\n\"\n            + \"varying vec2 vTextureCoord;\"\n            + \"uniform mat4 u_mvpMatrix;\\n\"\n            + \"void main() {\\n\"\n            +   \"vTextureCoord = u_TexCoord;\"\n            +   \"gl_Position = u_mvpMatrix * vec4(a_Position.xyz, 1.0);\\n\"\n            + \"}\";\n\n// フラグメントシェーダー\nlet fsTex =  \"precision mediump float;\\n\"\n            + \"uniform sampler2D u_Sampler;\\n\"\n            + \"varying vec2 vTextureCoord;\\n\"\n            + \"uniform vec2 u_TexSize;\\n\"\n            + \"uniform vec2 u_Center;\\n\"\n            + \"uniform float u_Strength;\\n\"\n\n            // すりガラスシェーダーのランダムより高品質か\n            + \"float random(vec3 scale, float seed) {\\n\"\n            + \"  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) *\"\n            + \"               43758.5453 + seed);\\n\"\n            + \"}\\n\"\n    \n            + \"void main() {\\n\"\n            + \"    vec4 color = vec4(0.0);\\n\"\n            + \"    float total = 0.0;\\n\"\n            + \"    vec2 toCenter = u_Center - vTextureCoord * u_TexSize;\\n\"\n            + \"    float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\\n\"\n            + \"    for (float t = 0.0; t <= 40.0; t++) {\\n\"\n            + \"        float percent = (t + offset) / 40.0;\\n\"\n            + \"        float weight = 4.0 * (percent - percent * percent);\\n\"\n            + \"        vec4 tex = texture2D(u_Sampler, vTextureCoord + toCenter *\"\n            + \"                             percent * u_Strength / u_TexSize);\\n\"\n            + \"        tex.rgb *= tex.a;\\n\"\n            + \"        color += tex * weight;\\n\"\n            + \"        total += weight;\\n\"\n            + \"    }\"\n            + \"    gl_FragColor = color / total;\\n\"\n            + \"    gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\\n\"\n            + \"}\";\n\n// 頂点座標\nvar position = [\n    -1.0,  1.0,  0.0,\n     1.0,  1.0,  0.0,\n    -1.0, -1.0,  0.0,\n\n    -1.0, -1.0,  0.0,\n     1.0,  1.0,  0.0,\n     1.0, -1.0,  0.0,\n];\n\n// テクスチャ座標\nvar textureCoord = [\n    0.0, 0.0,\n    1.0, 0.0,\n    0.0, 1.0,\n\n    0.0, 1.0,\n    1.0, 0.0,   \n    1.0, 1.0,\n];\n\n// ズームぼかしシェーダークラス\n// 参考(https://github.com/evanw/glfx.js)\nexport class ZoomBlurShader extends Shader {\n        \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 描画する\n    public draw(gl: WebGLRenderingContext, texture: WebGLTexture,\n                matrix: Float32Array, x: number, y: number, strength: number): void {\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        let prg = this.getProgram(gl, vsVert, fsTex);\n        gl.useProgram(prg);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clearDepth(1.0);\n\n        // インデックス取得\n        let a_Position = gl.getAttribLocation(prg, \"a_Position\");\n        let u_Sampler = gl.getUniformLocation(prg, \"u_Sampler\");\n        let u_TexCoord = gl.getAttribLocation(prg, \"u_TexCoord\");\n        let u_mvpMatrix = gl.getUniformLocation(prg, \"u_mvpMatrix\");\n        let u_TexSize = gl.getUniformLocation(prg, \"u_TexSize\");\n        let u_Center = gl.getUniformLocation(prg, \"u_Center\");\n        let u_Strength = gl.getUniformLocation(prg, \"u_Strength\");\n\n        // バッファ処理\n        let posBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, position);\n        let texBuffer = this.createBufferObject(gl, gl.ARRAY_BUFFER, textureCoord);\n\n        // テクスチャのバインド\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        // 変数として設定\n        this.setAttrib(gl, a_Position, 3, posBuffer);\n        this.setAttrib(gl, u_TexCoord, 2, texBuffer);\n        gl.uniform1i(u_Sampler, 0);\n        gl.uniformMatrix4fv(u_mvpMatrix, false, matrix);\n        gl.uniform2f(u_TexSize, gl.canvas.width, gl.canvas.height);\n        gl.uniform2f(u_Center, x, y);\n        gl.uniform1f(u_Strength, strength);\n        \n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}","import { Texture } from \"./Texture\";\nimport { PointColorShader } from \"../Shader/PointColorShader\";\n\n// グラデーションテクスチャクラス\nexport class GradationTexture extends Texture {\n    \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // グラデーションテクスチャを作成する\n    public makeGradation(gl: WebGLRenderingContext, frameBuffer: WebGLFramebuffer,\n                        points: number[], color: number[], count: number,\n                        matrix: Float32Array): void {\n        let shader = new PointColorShader();\n        this.makeTexture(gl);\n        shader.draw(gl, frameBuffer, gl.TRIANGLES, this.texture, points, color,\n                    count, matrix);\n    }\n}","import { Texture } from \"./Texture\";\n\n// 画像テクスチャクラス\nexport class ImageTexture extends Texture {\n    \n    // コンストラクタ\n    constructor() {\n        super();\n    }\n\n    // 画像テクスチャを作成する\n    public makeImageTexture(gl ,image): void {\n        this.texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n}","// テクスチャ基底クラス\nexport class Texture {\n    protected texture: WebGLTexture;\n\n    // コンストラクタ\n    constructor() {}\n    \n    // 空のテクスチャを作成する\n    public makeTexture(gl: WebGLRenderingContext): void {\n        this.texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.canvas.width, \n                      gl.canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n\n    // テクスチャを取得する\n    public getTexture(): WebGLTexture {\n        return this.texture;\n    }\n}","import { GlCanvas } from './Base/Canvas/GlCanvas';\nimport { LayerManager } from './App/LayerManager/LayerManager';\nimport { ImageDrawer } from './App/Image/ImageDrawer';\nimport { Vector } from './Base/Math/Vector';\nimport { mat4 } from 'gl-matrix';\nimport { EffectTool, EffectType } from './App/Effect/EffectTool';\nimport { Knob } from './Base/Component/Knob';\nimport { GradationTool, GradationType } from './App/Effect/GradationTool';\nimport { AdditionalTool, AdditionalType } from './App/Additonal/AdditionalTool';\n\nlet CANVAS_ID = \"canvas\";                   // キャンバスID\nlet CANVAS_WIDTH = 512;                     // キャンバス幅\nlet CANVAS_HEIGHT = 512;                    // キャンバス高さ\nlet CANVAS_INITIAL_POSITION_X = 250;        // キャンバス初期位置のX座標\nlet CANVAS_INITIAL_POSITION_Y = 100;        // キャンバス初期位置のY座標 \n\nlet dropArea;                               // ドロップエリア\nlet drawRect;                               // キャンバスの表示領域\nlet currentPotision;                        // キャンバス表示領域の現在位置\nlet glCanvas;                               // キャンバス\nlet layerManager;                           // レイヤー管理クラス\n\nlet effectTool;                             // エフェクトクラス\nlet gradationTool;                          // グラデーションクラス\nlet addtionalTool;                          // おまけツール\n\nlet adjustSliderTable1;                     // 調整スライダー1を表示するテーブル行\nlet adjustSliderLabel1;                     // 調整スライダー1のラベル\nlet adjustSlider1;                          // 調整スライダー1\nlet adjustSliderTable2;                     // 調整スライダー2を表示するテーブル行\nlet adjustSliderLabel2;                     // 調整スライダー2のラベル\nlet adjustSlider2;                          // 調整スライダー2\nlet toolSliderTable;                        // ツールスライダーを表示するテーブル行\nlet toolSliderLabel;                        // ツール用スライダーのラベル\nlet toolSlider;                             // ツール用汎用スライダー\nlet toolSliderTable2;                       // ツールスライダー2を表示するテーブル行\nlet toolSliderLabel2;                       // ツール用スライダー2のラベル\nlet toolSlider2;                            // ツール用汎用スライダー2\nlet seedSlider;                             // 母点スライダー\nlet knob;                                   // カレントノブ\nlet knobs;                                  // ノブ列\n\n// UI初期化\nfunction initUi(): void {\n    // ドロップエリアとキャンバス表示領域\n    dropArea = document.getElementById(\"dropArea\");\n    drawRect = document.getElementById(\"drawRect\");\n    // 調整スライダー1\n    adjustSliderTable1 = document.getElementById(\"adjustSliderTable1\");\n    adjustSlider1 = document.getElementById(\"adjustSlider1\");\n    adjustSliderLabel1 = document.getElementById(\"adjustSliderLabel1\");\n    adjustSliderTable1.style.display = \"none\";\n    // 調整スライダー2\n    adjustSliderTable2 = document.getElementById(\"adjustSliderTable2\");\n    adjustSlider2 = document.getElementById(\"adjustSlider2\");\n    adjustSliderLabel2 = document.getElementById(\"adjustSliderLabel2\");\n    adjustSliderTable2.style.display = \"none\";\n    // ツールスライダー\n    toolSliderTable = document.getElementById(\"toolSliderTable\");\n    toolSlider = document.getElementById(\"toolSlider\");\n    toolSliderLabel = document.getElementById(\"toolSliderLabel\");\n    toolSliderTable.style.display = \"none\";\n    // ツールスライダー2\n    toolSliderTable2 = document.getElementById(\"toolSliderTable2\");\n    toolSlider2 = document.getElementById(\"toolSlider2\");\n    toolSliderLabel2 = document.getElementById(\"toolSliderLabel2\");\n    toolSliderTable2.style.display = \"none\";\n    // 母点スライダー\n    seedSlider = document.getElementById(\"seedSlider\")\n    // キャンバス初期位置の設定\n    currentPotision = new Vector();\n    currentPotision.setXY(CANVAS_INITIAL_POSITION_X, CANVAS_INITIAL_POSITION_Y);\n    // ノブ列初期化\n    knob = null;\n    knobs = new Array();\n}\n\ninitUi();\n\n// アプリケーションを開始する\nfunction main() {\n    glCanvas = new GlCanvas(CANVAS_ID, CANVAS_WIDTH, CANVAS_HEIGHT);\n    layerManager = new LayerManager(glCanvas);\n    effectTool = new EffectTool(glCanvas, layerManager);\n    gradationTool = new GradationTool(glCanvas, layerManager);\n    addtionalTool = new AdditionalTool(glCanvas, layerManager);\n    \n    layerManager.updateCanvas(); \n    addCanvasEventListener();\n    setMatrix(glCanvas.getCanvas(), currentPotision);\n}\n\nmain();\n\n// ドラッグ中の要素がドロップ要素に重なった時\ndropArea.addEventListener('dragover', function (event) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n    dropArea.classList.add('dragover');\n});\n  \n// ドラッグ中の要素がドロップ要素から外れた時\ndropArea.addEventListener('dragleave', function () {\n    dropArea.classList.remove('dragover');\n});\n\n// ドロップ要素にドロップされた時\ndropArea.addEventListener('drop', function (event) {\n    event.preventDefault();\n    dropArea.classList.remove('dragover');\n    let drawer = new ImageDrawer();\n    let imageFile = drawer.getImageFile(event.dataTransfer.files);\n    let img = new Image();\n    img.src = URL.createObjectURL(imageFile);\n    img.onload = function () {\n        glCanvas.setCanvasSize(img.width, img.height);\n        drawer.draw(glCanvas.getGL(), img);\n        layerManager.addLayer(drawer.getImageTexture());   \n    };\n});\n\n// 調整スライダー1\nadjustSlider1.addEventListener(\"input\", function() {\n    effectTool.draw(this.value, adjustSlider2.value);\n}, false);\n\n// 調整スライダー2\nadjustSlider2.addEventListener(\"input\", function() {\n    effectTool.draw(adjustSlider1.value, this.value);\n}, false);\n\n// ツールスライダー\ntoolSlider.addEventListener(\"input\", function () {\n    if (knob !== null) {\n        let pos = knob.getCanvasPosition();\n        effectTool.draw(this.value, toolSlider2.value, pos.getX(), pos.getY());\n    } else {\n        effectTool.draw(this.value, toolSlider2.value); \n    }\n}, false);\n\n// ツールスライダー2\ntoolSlider2.addEventListener(\"input\", function () {\n    if (knob !== null) {\n        let pos = knob.getCanvasPosition();\n        effectTool.draw(toolSlider.value, this.value, pos.getX(), pos.getY());\n    } else {\n        effectTool.draw(toolSlider.value, this.value); \n    }\n}, false);\n\n// 母点スライダー\nseedSlider.addEventListener(\"input\", function() {\n        addtionalTool.draw(this.value); \n}, false);\n\n// 明るさ・コントラスト\ndocument.getElementById(\"brightnessContrast\").onclick = function () {\n    addtionalTool.stopAnimation();\n    setSlider(adjustSlider1, adjustSliderLabel1, adjustSliderTable1,\n              -1.0, 1, 0.01, 0.0, \"Brightness : \");\n    setSlider(adjustSlider2, adjustSliderLabel2, adjustSliderTable2,\n              -1.0, 1, 0.01, 0.0, \"Contrast : \");\n    toolSliderTable.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    effectTool.setEffectType(EffectType.EffectTypeBrightnessContrast);\n    effectTool.draw(adjustSlider1.value, adjustSlider2.value);\n    removeKnob();\n};\n\n// 色相・彩度\ndocument.getElementById(\"hueSarturation\").onclick = function () {\n    addtionalTool.stopAnimation();\n    setSlider(adjustSlider1, adjustSliderLabel1, adjustSliderTable1,\n              -1.0, 1, 0.01, 0.0, \"Hue : \");\n    setSlider(adjustSlider2, adjustSliderLabel2, adjustSliderTable2,\n              -1.0, 1, 0.01, 0.0, \"Sarturation : \");\n    toolSliderTable.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    effectTool.setEffectType(EffectType.EffectTypeHueSarturation);\n    effectTool.draw(adjustSlider1.value, adjustSlider2.value);\n    removeKnob();\n};\n\n// セピア\ndocument.getElementById(\"sepia\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    effectTool.setEffectType(EffectType.EffectTypeSepia);\n    effectTool.draw();\n    removeKnob();\n};\n\n// グレースケール\ndocument.getElementById(\"grayscale\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    effectTool.setEffectType(EffectType.EffectTypeGrayscale);\n    effectTool.draw();\n    removeKnob();\n};\n\n// 色反転\ndocument.getElementById(\"invert\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    effectTool.setEffectType(EffectType.EffectTypeInvert);\n    effectTool.draw();\n    removeKnob();\n};\n\n// 2値化\ndocument.getElementById(\"thresholding\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    setSlider(toolSlider, toolSliderLabel, toolSliderTable, 0.1, 1, 0.01, 0.5,\n              \"Threshold : \");\n    effectTool.setEffectType(EffectType.EffectTypeThreshold);\n    effectTool.draw(toolSlider.value);\n    removeKnob();\n};\n\n// すりガラス\ndocument.getElementById(\"frostedGlass\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    setSlider(toolSlider, toolSliderLabel, toolSliderTable, 1, 20, 0.1, 5,\n              \"Radius : \");\n    effectTool.setEffectType(EffectType.EffectTypefrostedGlass);\n    effectTool.draw(toolSlider.value);\n    removeKnob();\n};\n\n// ポスタリゼーション\ndocument.getElementById(\"posterization\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    setSlider(toolSlider, toolSliderLabel, toolSliderTable, 2, 16, 1, 8, \"Step : \");\n    effectTool.setEffectType(EffectType.EffectTypePosterization);\n    effectTool.draw(toolSlider.value);\n    removeKnob();\n};\n\n// 白背景透明化\ndocument.getElementById(\"transpalent\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    setSlider(toolSlider, toolSliderLabel, toolSliderTable, 0.1, 1, 0.01, 0.5,\n              \"Threshold : \");\n    effectTool.setEffectType(EffectType.EffectTypeTranspalent);\n    effectTool.draw(toolSlider.value);\n    removeKnob();\n};\n\n// ズームぼかし\ndocument.getElementById(\"zoomBlur\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    setSlider(toolSlider, toolSliderLabel, toolSliderTable, 0.1, 1, 0.01, 0.5,\n              \"Strength : \");\n    effectTool.setEffectType(EffectType.EffectTypeZoomBlur);\n    removeKnob();   // ノブを一度リセットする\n    let addedknob = new Knob((knobs.length).toString());\n    addedknob.addKnob(drawRect, dropArea);\n    knobs.push(addedknob);\n    knob = addedknob;\n    setMatrix(knob.getElement(), knob.getGlobalPosition());\n    let pos = knob.getCanvasPosition();\n    effectTool.draw(toolSlider.value, 0, pos.x, pos.y);\n};\n\n// 六角形ピクセル化\ndocument.getElementById(\"pixelate\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    setSlider(toolSlider, toolSliderLabel, toolSliderTable, 1, 60, 1, 10,\n              \"Scale : \");\n    effectTool.setEffectType(EffectType.EffectTypePixelate);\n    removeKnob();   // ノブを一度リセットする\n    let addedknob = new Knob((knobs.length).toString());\n    addedknob.addKnob(drawRect, dropArea);\n    knobs.push(addedknob);\n    knob = addedknob;\n    setMatrix(knob.getElement(), knob.getGlobalPosition());\n    let pos = knob.getCanvasPosition();\n    effectTool.draw(toolSlider.value, 0, pos.x, pos.y);\n};\n\n// 膨張フィルター\ndocument.getElementById(\"expansion\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    setSlider(toolSlider, toolSliderLabel, toolSliderTable, 1, 200, 2, 20,\n              \"Radius : \");\n    setSlider(toolSlider2, toolSliderLabel2, toolSliderTable2, -1.0, 1.0, 0.1, 1,\n              \"Strength : \");\n    effectTool.setEffectType(EffectType.EffectTypeExpansion);\n    removeKnob();   // ノブを一度リセットする\n    let addedknob = new Knob((knobs.length).toString());\n    addedknob.addKnob(drawRect, dropArea);\n    knobs.push(addedknob);\n    knob = addedknob;\n    setMatrix(knob.getElement(), knob.getGlobalPosition());\n    let pos = knob.getCanvasPosition();\n    effectTool.draw(adjustSlider1.value, adjustSlider2.value, pos.x, pos.y);\n};\n\n// グラデーション\ndocument.getElementById(\"blueRed\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    removeKnob();\n    gradationTool.setGradationType(GradationType.GradationTypeBlueRed);\n    gradationTool.draw();\n};\n\ndocument.getElementById(\"toyCamera\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    removeKnob();\n    gradationTool.setGradationType(GradationType.GradationTypeToyCamera);\n    gradationTool.draw();\n};\n\ndocument.getElementById(\"retro\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    removeKnob();\n    gradationTool.setGradationType(GradationType.GradationTypeRetro);\n    gradationTool.draw();\n};\n\n// おまけ機能(ボロノイアニメーション)\ndocument.getElementById(\"voronoiAnimation\").onclick = function () {\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    removeKnob();\n    addtionalTool.setAdditionalType(AdditionalType.AdditionalTypeVoronoiAnimation);\n    addtionalTool.draw(seedSlider.value);  \n};\n\n// おまけ機能(距離マップアニメーション)\ndocument.getElementById(\"distanceMapAnimation\").onclick = function () {\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    removeKnob();\n    addtionalTool.setAdditionalType(AdditionalType.AdditionalTypeDistanceMapAnimation);\n    addtionalTool.draw(seedSlider.value);  \n};\n\n// おまけ機能(ステンドグラス風)\ndocument.getElementById(\"stainedGlass\").onclick = function () {\n    addtionalTool.stopAnimation();\n    adjustSliderTable1.style.display = \"none\";\n    adjustSliderTable2.style.display = \"none\";\n    toolSliderTable.style.display = \"none\";\n    toolSliderTable2.style.display = \"none\";\n    removeKnob();\n    addtionalTool.setAdditionalType(AdditionalType.AdditionalTypeStainedGlass);\n    addtionalTool.draw(0);  \n};\n\n// キャンバス保存\ndocument.getElementById(\"savePng\").onclick = function () {\n    glCanvas.saveCanvas();\n};\n\n// キャンバス表示領域のマウスイベント\ndrawRect.addEventListener('wheel', function(event) { \n    event.preventDefault();\n    event = <WheelEvent>event;\n    let del = new Vector();\n    let x = event.deltaX;\n    let y = event.deltaY;\n    del.setXY(-x, -y);\n    currentPotision.add(del);\n    setMatrix(glCanvas.getCanvas(), currentPotision);\n    if (knob !== null) {\n        for (let i = 0; i < knobs.length; i++) {\n            let pos = knobs[i].getGlobalPosition();\n            pos.add(del);\n            knobs[i].setGlobalPosition(pos);\n            setMatrix(knobs[i].getElement(), pos);\n        }\n    }\n}, false);\n\ndrawRect.addEventListener('mousemove', function (event) { \n    if (knob === null) {\n        return;\n    }\n    if (knob.getIsEnable() && !knob.getIsSelected()) { // つまみが選択状態ではないとき\n        let pos = new Vector();\n        var rect = this.getBoundingClientRect();\n        pos.setXY(event.clientX - rect.left - knob.getElement().clientWidth / 2.0,\n                  event.clientY - rect.top - knob.getElement().clientHeight / 2.0);\n        setMatrix(knob.getElement(), pos);\n        knob.setGlobalPosition(pos);\n    }\n}, false);\n\n// スライダーを設定する\nfunction setSlider(slider: HTMLInputElement, sliderLabel: HTMLElement,\n                   sliderTable: HTMLElement, min: number, max: number, step: number,\n                   value: number, label: string) {\n    slider.min = min.toString();\n    slider.max = max.toString();\n    slider.step = step.toString();\n    slider.value = value.toString();\n    sliderLabel.textContent = label;\n    sliderTable.style.display = \"block\";\n}\n\n// 行列を文字列で取得する\nfunction getMatrixString(pos: Vector): string {\n    let matrix = mat4.create();\n    mat4.identity(matrix);\n    mat4.translate(matrix, matrix,\n                  [pos.getX(), pos.getY(), -1.0]);\n\n    let rad = 0;\n    var axis = [0.0, 0.0, 1.0];\n    mat4.rotate(matrix, matrix, rad, axis);\n\n    mat4.scale(matrix, matrix, [1, 1, 1]);\n    return matrix.toString();\n}\n\n// 行列を設定する\nfunction setMatrix(element: HTMLElement, pos: Vector): void {\n    let matrix = getMatrixString(pos);\n    let matrixFunction = \"matrix3d\"  + \"(\" + matrix + \")\";\n    element.style.transform = matrixFunction;\n}\n\n// エフェクトツールにキャンバス座標を伝える\nfunction setCanvasCoordinateToEffectTool(pos: Vector): void {\n    if (effectTool.getEffectType() === EffectType.EffectTypeZoomBlur ||\n        effectTool.getEffectType() === EffectType.EffectTypePixelate ||\n        effectTool.getEffectType() === EffectType.EffectTypeExpansion) {\n        effectTool.draw(toolSlider.value, toolSlider2.value, pos.getX(), pos.getY());\n    }\n}\n\n// 位置からノブを探す\nfunction findKnob(pos: Vector): Knob {\n    for (let i = 0; i < knobs.length; i++) {\n        if (knobs[i].isCollusion(pos)) {\n            return knobs[i];\n        }\n    }\n    return null;\n}\n\n// ノブを取り除く\nfunction removeKnob() {\n    if (knob !== null) {\n        for (let i = 0; i < knobs.length; i++) {\n            knobs[i].getElement().remove();\n        }\n        knobs.length = 0;\n        knob = null;\n    }\n}\n\n// キャンバスにマウスイベントリスナーをつける\nfunction addCanvasEventListener(): void {\n    let canvas = <HTMLElement>glCanvas.getCanvas();\n    canvas.addEventListener('mousedown', function (event) {\n        if (knob === null) {\n            return;\n        }\n        if (knob.getIsEnable()) {\n            let pos = new Vector();\n            if (knob.getIsSelected()) { // つまみが選択されているとき(置かれている)\n                pos = knob.getCanvasPosition();\n            } else {\n                // つまみが選択されていないとき(移動中)\n                pos = glCanvas.getCanvasCoordinate(event);\n                knob.setCanvasPosition(pos);\n            }\n            knob.setIsSelected(!knob.getIsSelected());\n            setCanvasCoordinateToEffectTool(pos);\n        }\n        // ノブを変更する\n        let currentKnob = findKnob(glCanvas.getCanvasCoordinate(event));\n        if (currentKnob !== knob && currentKnob !== null) {\n            knob = currentKnob;\n            if (knob.getIsSelected()) {\n                knob.setIsSelected(false);\n            }\n        }\n    }, false);\n    canvas.addEventListener('mousemove', function (event) {\n        if (knob === null) {\n            return;\n        }\n        if (knob.getIsEnable() && !knob.getIsSelected()) {\n            // つまみが選択されていないとき\n            let coord = glCanvas.getCanvasCoordinate(event);\n            let size = new Vector();\n            size.setXY(- knob.getElement().clientWidth / 2.0,\n                       - knob.getElement().clientHeight / 2.0);\n            coord.add(size);\n            setCanvasCoordinateToEffectTool(coord);\n        }\n    }, false);\n    canvas.addEventListener('mouseup', function (event) {\n        if (knob === null) {\n            return;\n        }\n        if (knob.getIsEnable() && !knob.getIsSelected()) {\n            // つまみが選択されていないとき\n            let coord = glCanvas.getCanvasCoordinate(event);\n            setCanvasCoordinateToEffectTool(coord);\n        }\n    }, false);\n}"],"sourceRoot":""}